####### Lecture Intro

#### FREQUENTLY ASKED QUESTIONS
------------



####### Lecture WhatIsCSharp

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is Object-Oriented Programming (OOP)?
There are two main programming paradigms, Object-Oriented Programming and Functional Programming.
Functional Programming is all about having individual functions that do all the work. All the logic, all the state, is based on the input and output of all the functions.
Whereas Object-Oriented Programming is all based on objects and those objects can have state (like variables) and logic (like functions)



FAQ: What is the difference between C#, Java, and C++?
They can all do object-oriented programming so in that sense they are actually quite similar. 
If you know one you will quickly pick up the other ones. There are various syntax differences, but in general they all have objects, they all have functions, they all have variables, etc.



FAQ: What does cross-platform mean? 
It means your code can run on multiple platforms. Normally you have to compile your code to a certain instruction set, meaning the program is only compiled to run on Windows, that same code will not run on Linux or Mac. You need slightly different code to run on those different platforms.
Whereas C# supports multi-platform, meaning you can make a project and write all your code while working in Windows, and then that same code can run on Linux, Mac, Xbox, Android, etc.
For example, my games that I build with Unity, they are playable on Windows, Mac and Linux. I don't have to build 3 separate projects, just select a different build target and the exact same code will work.



FAQ: What are some examples of applications I can build with C#?
The answer is simply "anything", you can build whatever you want with C#.
You can make games, you can make websites, you can make console apps, you can make console games, you can make mobile apps, you can build a server backend, etc.
C# is extremely versatile which makes it an excellent language to learn.



FAQ: What does 'type safe' mean in programming?
It means the compiler enforces certain rules that mean your code will only compile if it follows those rules.
For example if you do:
##REF##code, int a = 5;
string b = a; // Error!##REF##
You get a compile error because you cannot automatically convert an 'int' type onto a 'string' type.
This is great because it forces you to write proper code which helps you before compilation which leads to fewer errors during runtime.
Whereas other non type safe languages, like Javascript, you can have that kind of code, and then perhaps it will work in runtime or it will throw an error.
Type safe forces you to use the correct types which greatly reduces the odds of a runtime error.



------------



####### Lecture HowToGetHelp

#### FREQUENTLY ASKED QUESTIONS
FAQ: What should I do if I don't understand a concept or lecture?
It's normal to find some concepts confusing at first so don't feel bad about yourself. Programming is a complex skill and learning it takes time, I've been writing code for 25 years and I'm still learning new things.
Make sure to read through the Frequently Asked Questions for each lecture, do the Quizzes, and all the Interactive Exercises.
The more you actively try to learn, the more you actually put your knowledge into practice, the more you will actually learn.
And of course if you do all that and still don't understand anything feel free to post a question in the Lecture Comments, I read and answer those every day so if you have some question I'll do my best to help.



FAQ: How can I effectively use this Unity project to learn better?
This Unity project contains a wealth of information, there's FAQs for each lecture, which can clarify some doubts. There are quizzes which help you solidify the knowledge you gained in each lecture, and exercises to put what you learn into practice.
So the way you do it is by doing all of that. Always remember that your goal is to learn, not to speed through this course. <b>Take your time</b> to go through every piece of knowledge in this course and by the end you will have learned a ton.



FAQ: What can I do if I encounter errors in my code?
First just make sure you write the code perfectly. The main cause of errors for beginners is simply forgetting that everything matters in the code. Capitalization matters, where you place a semi-colon <b>;</b> matters, how many opening and closing curly braces <b>{ }</b> you have matters.
So always double and triple check that you're writing code properly.

Then just place the mouse over the error, for simple errors like a missing ; the error itself will help you.

Then watch the lecture covering common errors, in there I cover a lot of the common beginner errors along with what they mean and how to solve them.
Also here in the Unity project make sure you have the <b>Code Monkey Companion window</b> open, that window will provide extra clarification on a ton of errors.
And as always I'm available in the <b>Lecture Comments,</b> so if there's something you cannot solve just post a question and I'll do my best to help.



FAQ: How can I get my questions answered quickly?
You can just post a question in the Lecture Comments and the Bot will provide an automatic reply within 2-3 minutes. Since the bot was trained on the contents of the course it should be very helpful.
Then over the next 24 hours, I myself will manually answer the question.



FAQ: What is the best way to ask a question to ensure I get a helpful answer?
When asking questions, be as <b>specific</b> as possible. Describe <b>EXACTLY </b>what you expected to happen versus what actually happened, include any <b>error messages</b> and the lines of code where the errors occur. 

The more detail you provide, the easier it will be for me to help you solve whatever the problem is.

So don't just say <i>"it's not working"</i> since there's nothing I can do to help with such little information. Be <b>very specific</b> on what exactly isn't working, any errors in the console or any unintended behaviour.



FAQ: Is it okay if I take longer to understand the course material?
<b>Absolutely!</b>
Programming is a pretty complex skill and learning it does take time, so you are definitely <b>NOT</b> expected to go through this course in a day or a week or even a month.

Remember this is <b>YOUR</b> learning journey, the only thing that matters is that you're learning, that's it, the time does not matter as long as you are learning.

So go slow, take your time, make sure to fully understand every lecture before going onto the next one, read all the FAQs, do all the Quizzes and Exercises.
If you take your time and pay attention then I guarantee by the end you will have gained a <b>TON of knowledge.</b>



FAQ: How can the Code Monkey Companion window help me with errors?
The Code Monkey Companion window in this project can provide extra clarification and potential solutions whenever it detects an error.

So I recommend you always keep it open in this project, go to the menu on the top bar, Code Monkey - Companion
I like to place the window just below the inspector so that it's always visible.



FAQ: Can I post questions in the comments even if I'm a complete beginner?
Of course!

Whenever you encounter an issue or have trouble understanding something go ahead and post it in the comments. The Bot will reply almost instantly and then I myself will manually answer within 24 hours.



------------



####### Lecture GettingStartedWithVisualStudio

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an IDE?
An IDE is a Integrated Development Environment, which basically means a program where you can write your code and run it.
In this course we are using Visual Studio, it's what I use myself. But you can use any IDE, some people like Visual Studio Code, others like Rider from Jetbrains, and others.



FAQ: What is the difference between Visual Studio and Visual Studio Code?
They are two completely separate programs.
Visual Studio is a fully integrated IDE with lots of advanced features, whereas Visual Studio Code is more meant to be a simpler lightweight code editor.
In this course I am using Visual Studio, the Community free edition.



FAQ: What is a Console app and why are we starting with it?
It's just a console that runs some code. So there are no visuals, no mouse clicks, no complex inputs, just basic text.
It's a great starting point because of how simple it is. After you learn the absolute basics with just a simple text console app, then you can take that knowledge and use it with something that allows you to build a visual interface on top of that logic, like Unity or WinForms.



FAQ: What are top-level statements? What is the alternative?
Top-level statements lets you just write code directly and it will run from top to bottom.
Without it, you need to define a class with some Main function that will be the program entry point.
So for beginners the top-level statements is the better approach since it greatly simplifies the code you need to write.



FAQ: Why do we see "Hello World" by default?
It's just the common standard, any beginner tutorial for any programming language always begins with printing some simple "Hello World!" text.



FAQ: What is Console.WriteLine()?
It prints a line of text to the console.
In technical terms, Console is a class, WriteLine is a function within that class and it takes some text as a parameter.
All of those topics, Classes, Functions, Parameters, are covered in detail in future lectures.



FAQ: Do we need to install the Viasfora extension?
You don't absolutely need to (the code will compile the same, it's just a visual) but I highly recommend it. 
Adding some colors to the code makes it much easier to read and parse all the various parenthesis and code blocks that exist in your code.



------------



####### Lecture UnityInstallAndBasics

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is Unity Hub?
This is the program that manages all your Unity versions and Projects. 
It allows you to install different versions of Unity, manage projects, and easily switch between them.



FAQ: Do I need to create a Unity account to use Unity?
Yes, you need to create a Unity account in order to use Unity.
There's a free Personal license you can use so it doesn't cost anything.



FAQ: How do I install Unity Editor?
You can install the Unity Editor through Unity Hub. After logging in, you can go to the 'Installs' section to add a new version of Unity Editor.
Alternatively, you can go to the projects tab, add the Unity Project for this course, and if you don't have that version installed there should be a button where you can install it.



FAQ: What are the main windows I should be familiar with in Unity?
The main windows include the Scene view (where you visually construct your scene), Game view (to preview the game), Hierarchy (lists all objects in the scene), Project (organizes assets and files), Console (shows all logs and errors), and Inspector (displays properties of the selected object).
Then specific to this course there are separate windows for the Code Monkey CSharp Course window, Companion, Frequently Asked Questions, Quiz and Exercises.



FAQ: How do I create a new game object in Unity?
In the Hierarchy window, you can right-click and choose from the context menu to create new Game Objects like Cameras, Lights, or 3D Objects such as Cubes and Spheres.



FAQ: What is a component in Unity?
A component is a piece of functionality that you can add to a GameObject. Components cover a wide range of functionalities, including physics behaviors, rendering properties, and custom scripts.
For example to make a game object fall along with gravity you just add a Rigidbody component.



FAQ: How do I run and test my Unity project?
You can press the Play button at the top in the middle which will start running your project in the Game view.
This will run whatever logic is on all the components on all game objects in this scene.
Many of the interactive exercises require to you to run the scene in order to test the exercise completion.



FAQ: Can I customize the Unity Editor layout?
Yup!
You can move any window anywhere, then when you have a layout you like you can also save it in the top right corner.
Although I encourage you to use the same layout as me just to avoid any confusion.



FAQ: What is a script in Unity, and how do I create one?
A script is a piece of code that allows you to add logic to your game objects.
You can create a new script by right-clicking in the Project window, selecting Create - C# Script, then naming your script and attaching it to a game object.
This creates a C# class which extends the Unity MonoBehaviour class. The script needs to extend this class in order to be added to a game object as a component.



FAQ: How do I attach a script to a GameObject?
After creating a script, you can attach it to a GameObject by dragging the script from the Project window onto the GameObject in the Hierarchy window or by adding it via the Add Component button in the Inspector window when the GameObject is selected.
Remember how the script needs to extend MonoBehaviour in order to be used as a component.



------------



####### Lecture HowTheInteractiveExercisesWork

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are the various custom windows for this C# course project?
There is the Code Monkey Main window
The Frequently Asked Questions window
The Quiz window
The Exercises window
And the Companion window



FAQ: What is the Code Monkey Main window?
This is the main window, it checks for updates, and has a list of all the lectures.
Use this window to select the lecture and click the buttons to open the FAQ/Quiz/Exercises window.



FAQ: What is the Frequently Asked Questions window?
This window contains the Frequently Asked Questions for each Lecture.
There are multiple questions along with very detailed answers.
These usually help clarify some things on each lecture or merely rephrase some things in a different way to really reinforce what you learned in the lecture.



FAQ: What is the Quiz window?
This window contains multiple choice quizzes for each Lecture.
There's a question and multiple possible answers, upon selecting an answer you will see which one is correct and a detailed answer that relates to the question.
This can help test your knowledge to see if you truly understood everything in the lecture and help solidify the knowledge you gained.



FAQ: What is the Exercises window?
This window contains all the interactive exercises for each Lecture.
You can select the exercise read the instructions and then Start it, doing so will copy some files onto the project which you need to modify in some way in order to complete the exercise.
Some exercises just require you to write some code while others require you to write some code and then press Play in Unity to test your code.
If you get stuck you can always read the exercise Hint which should help.
Or if you get really really stuck then you can read and apply the solution to the exercise.
Then you should watch the exercise walkthrough, this is a video where I go through the exercise myself and explain further what the exercise is testing and what you should learn from it.
Then you can click on the Complete Exercise button which will remove the testing files so you can move onto the next exercise.



FAQ: What is the Companion window?
This window provides extra help whenever it detects any compiler errors or while doing some exercises.
You should keep this window open and always visible so it can help you whenever you encounter some error.



FAQ: What if I can't complete an exercise?
You can read the exercise Hint which might help point you in the right direction.
If you still can't do it then you can read and apply the solution.
And then make sure to watch the video walkthrough where I complete the exercise myself and provide extra clarification on what the exercise is testing.



FAQ: Should I read all FAQs, do all Quizzes and Exercises for every lecture?
YES!
If you truly want to learn, which I assume you do, then yes take your time and do all the content related to every single lecture.
Remember that your goal is simply to learn, it is not to speed through the course. So you should NOT sprint through this course in a few days, if you're really trying to learn then you should take your time and do everything related to every single lecture.
I put my 10+ years of C# knowledge into this course, if you take your time and do everything you will gain the knowledge that I have in just a few months which is insanely fast.
So take your time, do all the content related to every single lecture, and by the end you will have gained a massive amount of knowledge!



------------



####### Lecture CommonErrorsAndHowToSolveThem

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a syntax error?
A syntax error occurs when the code doesn't follow the language rules or structure, like missing semicolons, parentheses, or curly braces.
Always remember how code needs to be written absolutely perfectly or it won't work.



FAQ: Why is code case-sensitive, and how does it affect my program?
C# is a case-sensitive language, meaning it distinguishes between uppercase and lowercase letters.
int and Int are two completely different things as far as the compiler is concerned. 'int' is a built-in type, whereas 'Int' does not exist (unless you define it)
If a function is called MyFunction(); and you write myFunction(); you get an error because it does not perfectly match.
The compiler does not know English, it only knows exact symbols, and a lower case and upper case letter are two completely different things.
So always pay very very close attention to how you write your code, changing the capitalization even on just one tiny letter means you are suddenly referencing something completely different.



FAQ: What does "type does not exist" mean, and how can I fix it?
This error usually means you're trying to use a class or type that hasn't been defined or imported.
First check for typos to make sure you write the class name perfectly exact.
Then ensure you've included the correct using statements for namespaces where that class exists.
For example if you try to define a variable of type List<int> you will get an error if you don't include using System.Collections.Generic;
Also when working with the top-level statements template, it automatically includes some common using statements.



FAQ: How do I solve a 'variable not initialized' error?
This error means you're trying to use a variable before giving it a value.
You need to give it a value, not just define it, before you can use it.
##REF##code, 
int a;
Console.WriteLine(a); // Error
----------
int a = 12;
Console.WriteLine(a); // Works
##REF##


FAQ: What's a NullReferenceException, and how do I fix it?
This error occurs when you try to use an object reference that is set to null.
Make sure your objects have an actual value before trying to access some field or function inside it.

I covered my 4 step process for solving this error here:
##REF##video_small, 5irv30-bTJw, How to Fix NullReferenceException in C#!##REF##


FAQ: How do I fix 'cannot convert type' errors?
This error happens when you try to assign or pass a value of one type to a variable of another incompatible type.
For example you cannot do:
##REF##code, 
string s = 56; // Cannot implicitly convert from int onto string!
##REF##
Use casting, like <b>(int)</b>, or conversion methods, like <b>int.Parse();</b> to convert between compatible types properly.



------------



####### Lecture ProgrammingBasics

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is identation? Why doesn't it affect the code?
Identation is the empty space used to visually organize the code, like in this example:
##REF##code, 
Console.WriteLine("Hello");
	Console.WriteLine("Code");
			Console.WriteLine("Monkey");
	Console.WriteLine("!");
##REF##
It has no meaning for the compiler, you can ident in any way you want and it won't affect the way the code works.
But it does impact readability so you should definitely ident your code properly, it should be easy to see at a glance what code belongs to what code block


FAQ: What does it mean that C# is case sensitive?
It means that for example <b>'int'</b> and <b>'Int'</b> are two completely different symbols that refer to completely different things. Changing something from lower case to upper case completely changes what the code is referring to.
You cannot declare variables with the exact same name, this throws an error:
##REF##code, 
int age = 35;
int age = 56; // Error!
##REF##
But this is valid code:
##REF##code,  
int age = 35;
int Age = 56; // No error
##REF##
It's valid because code is case sensitive and they are slightly different, 'age' vs 'Age'.
So when writing code always pay very close attention to how you write code and make sure you are writing the capitalization perfectly. 
This is the number one mistake that beginners make so remember that.


FAQ: What are code blocks?
That's the code within curly braces { }
A code block basically groups together some code. 
For example all the code that belongs to a function will be in that function's code block, all the code that belongs to an if will be in that if's code block, etc.
Always pay close attention to where you are writing code. Depending on where you are writing (which code block) will impact what code you can write. 
For example you cannot write a regular instruction like Console.WriteLine(); just inside a class code block, only inside a function code block.



FAQ: What if I forget to write a semi-colon?
If you don't write a semi-colon then the compiler does not know when the instruction ends and just keeps reading the code as if it were all one instruction which will likely lead to errors.
Remember how for the compiler the new lines in the text don't mean anything, all that matters are the semi colons ; and code blocks { }



FAQ: I see some error! Help!
Check the Common Errors lecture for a bunch of common errors.
Check your capitalization, remember that code is case-sensitive
Check where you are writing the code, you probably want to be writing inside some function
Check your 'using' statements up top, in order to use Console.WriteLine(); you need 'using System;'
And check the Code Monkey Companion window, it provides extra clarifications on various errors and what might be causing them.



------------



####### Lecture Variables

#### FREQUENTLY ASKED QUESTIONS
FAQ: What exactly is a variable?
A variable is a container for data. Think of it as a box and inside that box you can place some value.
Then you can write code that uses a variable instead of a value, and by doing so when the code executes it will go inside that variable to grab the currently stored value and continue running the logic using that value.
This also means you can have different behaviour depending on the value stored in the variable.
The simplest example is just a Player object with some movement code. Instead of writing the movement speed directly you can define a variable and by modifying the value stored inside that variable you modify how fast/slow the player moves.



FAQ: Why are data types important?
Each variable needs to have a data type, that data type defines what type of data we can store inside that variable.
There are data types for storing numbers, and if you define a variable of that type then you cannot store a string of text inside that variable.
You always need to use the correct data type for whatever data you're trying to store.
The next lecture covers Data Types in detail.



FAQ: What is a good name for a variable?
A good name is something that describes exactly what that variable represents. Ideally just by reading the variable name you should be able to understand what it represents and how it might be used.
For example, '<i>moveSpeed</i>' is a good variable name, it clearly communicates that this variable is used as some kind of movement speed.
A bad name would be '<i>x</i>', just by reading it you have no idea what it represents. 
(unless you're making some math equation and x really is the correct name for that element)
You should also avoid abbreviations and acronyms, those might be perfectly clear to one person and very confusing to someone else.
There is a very important lecture later on in the course all about Naming rules and how to choose good names.



FAQ: What happens if I write 'Int' instead of 'int'?
You get an error because there is no such type named 'Int'
Always remember that code is case sensitive, the compiler doesn't know English so as far as the compiler is concerned 'Int' and 'int' are two completely separate types with no relation between them.
Whenever you get an error the first thing you should check is if you're writing the code absolutely perfectly. Pay very close attention to capitalization, this is something a lot of beginners mistake.



FAQ: What is Console.WriteLine()?
This is a function that writes to the C# console.
Don't worry about functions and classes right now, those are all explained in detail in future lectures.
For now just know that it prints something to the console, and the alternative in Unity is this:
##REF##code, Debug.Log("Hello World!");##REF##


FAQ: What are the various ways to increment a variable?
All of these lines of code are doing the exact same thing, incrementing a variable by one:
##REF##code, age = age + 1;
age += 1;
age++;##REF##
These are just shorthands, the last one is especially useful when working with 'for' Loops which we will learn about in a future lecture.



FAQ: What if I define a variable but don't give it a value?
If you don't give it a value then the variable is uninitialized and cannot be used until you give it a value.
If you do this you get an error
##REF##code, int age;\nConsole.WriteLine(age); // Variable 'age' is uninitialized!##REF##
Although later on in the course we are going to cover Classes and Class Variables, and if you don't define a value for those it will default to a zero value. Meaning 0 for an int field, false for a bool field and null for a string field.



------------



####### Lecture DataTypes

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are data types, and why are they important in programming?
All data in programming has some kind of type, like a number or a string of text.
Data Types are how you define what type of data you are working with.
For example if you define a variable of type string then the compiler knows that variable can only contain strings of text
If you define a variable of type int then the compiler only lets you store whole numbers inside it. If you try storing a string of text or a decimal number you get an error.



FAQ: What is the difference between double, float, and decimal in C#?
All 3 store values with decimal points, like 56.4
But they have different sizes in bytes which affect the min/max values they can store as well as their precision.
Check out the official C# docs for the details: <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types</a>
Also they have different postfixes.
To define a float you need to append <b>f</b>
To define a decimal you need to append <b>m</b>
To define a double you don't append anything.



FAQ: What happens if I try to assign a decimal value to an int variable?
If you just write this code
##REF##code, 
float f = 35.9f;
int i = f;
##REF##
You get an error because it cannot be converted automatically
But if you force the conversion with a cast:
##REF##code, 
float f = 35.9f;
int i = (int)f;
##REF##
This will indeed convert the value onto an int and the result will be the whole number with everything after the decimal point ignored.
Importantly it does <b>NOT</b> round the number, so if you cast 35.9f onto an int the result is 35 and NOT 36.



FAQ: What does appending 'f' or 'm' to a number mean in C#?
It defines the type as either float or decimal (or double if you don't append anything)
##REF##code, 
double d = 35.6;
float f = 35.6f;
decimal d = 35.6m;
##REF##


FAQ: How is a string different from a char?
A char represents a single character whereas a string is a string of text (multiple characters)
Essentially a string is an array of char. In fact you can get a character from a string by accessing it like you would an array
##REF##code,
string name = "Code Monkey";
Console.WriteLine(name[5]); // M
##REF##


FAQ: What is string interpolation?
That is the name for when you add a $ sign before the string which allows you to reference code within the string quotes.
##REF##code,
string name = "Code Monkey";
string myNameIs = $"My name is {name}";
##REF##
You can use that method or simply concatenate multiple strings together like this
##REF##code,
string name = "Code Monkey";
string myNameIs = "My name is " + name;
##REF##
Both methods return the same result.


FAQ: How many possible values does bool have?
Only 2, <b>true</b> or <b>false</b>
Or sometimes referred to as 0 or 1 since the boolean type is essentially just binary.
This type is used especially when working with ifs and conditions like we will see in a future lecture.



FAQ: What does the 'var' keyword do, and when should I use it?
The var keyword lets the compiler infer the type of a variable based on what value you assign to it.
##REF##code,
var i = 35; // int
var name = "Code Monkey"; // string
var isEnemy = false; // bool
##REF##
Some people like how compact it is, but personally I am not a fan of var because it obscures what type is actually being used. I like my code to be as explicit as possible so I never have to question what types I'm working with.



FAQ: What are the pros and cons of using var instead of explicit data types?
The pro is it's simpler to write and can make the code visually simpler.
The con is how it can sometimes be tricky to know what type you're working with, you need to place the mouse over the variable to inspect the type.
In some cases this is not a terrible problem like this one:
##REF##code,
var name = "Code Monkey";
##REF##
It's clear in this case that name will be a string.
However in this following case:
##REF##code,
var result = SendBugReport();
##REF##
What type is result? Is it a bool whether the function succeeded or failed? Is it a string for some kind of message? Or some other custom type?
There's no way to know just by looking at the code, you have to mouse over to see what type that function returns.
So personally I like being as explicit as possible, like this:
##REF##code,
BugReportResult result = SendBugReport();
##REF##
Now it is clear that the result variable is of type BugReportResult, no need to mouse over.


But that's very much just personal preference, there's nothing inherently wrong with var, lots of people like using var, so if you like it go ahead and use it.



FAQ: Why does dividing two integers not give a decimal result, and how can I fix this?
Because when you divide an int by another int the result of that calculation will be of the same type, int
And if the result is a decimal value then it will simply be cast down into an int which will ignore anything after the decimal point
##REF##code,
int health = 1;
int healthMax = 10;
Console.WriteLine(health / healthMax); // 0
##REF##
The solution is to cast at least one of the values onto a decimal type like float
##REF##code,
int health = 1;
int healthMax = 10;
Console.WriteLine((float)health / healthMax); // 0.1
##REF##


------------



####### Lecture IfStatementsConditions

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an if statement and how does it work in C#?
Ifs are core to any kind of programming, it's how you can use a condition and depending on whether it's true or false the code execution branches and it runs some code or some other code.
They are quite simple to write, if and then a condition with an optional else, but despite their simplicity they are core to making pretty much any program.



FAQ: Can I store the result of the condition in a bool and test that?
Yup! You can place the condition directly in the if
##REF##code,if (a < 3) {
    // Do something
}##REF##
Or store the condition result in a bool variable and use that directly in the if
##REF##code,
bool condition = a < 3;
if (condition) {
    // Do something
}
##REF##
By the way remember you can also revert the condition value with a ! NOT
##REF##code,
bool condition = a < 3;
if (!condition) {
    // Do something
}
##REF##



FAQ: What are the different mathematical operations that can be used in conditions?
You can use: 
< less than
> bigger than
<= less than or equals
>= bigger than or equals
== equals
!= not equals



FAQ: What does the exclamation point ! mean in conditions?
It means NOT which inverts the boolean value
##REF##code,
bool b1 = !true; // false
bool b2 = !false; // true
##REF##
You can also put a condition inside parenthesis and use a ! NOT to invert it
##REF##code,
if (!(1 < 3)) {
	// This code won't run because the condition ends up as false
}
##REF##


FAQ: What is the difference between < and <=
One is less than and the other is less than or equals
##REF##code,
bool b1 = 1 < 1; // false
bool b2 = 1 <= 1; // true
##REF##


FAQ: What is the difference between = and ==
The single equals = is the assignment operator, like when you assign a value to a variable
##REF##code,
bool b = true;
##REF##
The double equals == is the equality comparison, it tests whether two elements are equal
##REF##code,
bool b = 1 == 1; // true
##REF##
Always remember to use double equals when testing for equality otherwise you get some strange results
##REF##code,
bool b1 = false;
Console.WriteLine(b1 == true); // Comparing against true
Console.WriteLine(b1 = true); // Assigning b1 to true
##REF##


FAQ: Do you absolutely need to write the else?
No, the else is optional. If all you want is to run some code when the if is true and don't want to run any code when the if is false then you don't need to include an else.


FAQ: What if I write & instead of &&?
The single ampersand & is the bitwise AND operator, this is a more advanced operator for working with bits. I cover this later on in the Advanced section of this course.
The double ampersand && is the logical AND operator which is how you combine two conditions in a logical AND



FAQ: What is the conditional short circuit?
This is how the evaluation of if conditions will only happen if they are needed.
For example, if you have two conditions with an OR between them (which means the result is true if either element is true) and the first one evaluates to true (code executes left to right) it does not matter what the second one evaluates to because whether it's true or false the result when combined with a 'true OR' will always be true
##REF##code,
if (true || ReallyExpensiveFunction()) {
  // This code runs, ReallyExpensiveFunction() is never called
}
##REF##
Alternatively if you're doing an AND operation (which means the result will be true only if both are true) and the first one evaluates to false, then it won't evaluate the second condition because regardless of the result when combined with a false && it will end up false
##REF##code,
if (false && ReallyExpensiveFunction()) {
  // This code does not run, and ReallyExpensiveFunction() is never called
}
##REF##


FAQ: How many conditions can I have inside an if?
As many as you want, there's no fixed limit.
Although of course always keep code readability in mind, the more conditions you have in a single if the harder it becomes to understand what that code is doing.



FAQ: Is it necessary to use curly braces {} in if statements?
Technically no, if you have an if and inside that if you only want to do a single instruction you can omit the curly braces.
##REF##code,
if (true) 
    Console.WriteLine("Something"); // Runs only when the if is true
##REF##
However if you do that, it is very easy to make the mistake of forgetting to add curly braces if you suddenly want to add more than one instruction
##REF##code,
if (true) 
    Console.WriteLine("Something"); // Runs only when the if is true
    Console.WriteLine("Another"); // This one runs every time
##REF##
In this case the second instruction runs every time, regardless of the if result, it is completely outside of the if even though visually the identation looks like it's inside, but like I covered previously, remember how for the compiler the identation does not exist, it does not matter, all that matters are code blocks.
So technically you don't have to always include curly braces, but I highly recommend you do to avoid these kinds of mistakes. Believe me I've made these mistakes many times and caused me a ton of headaches before I decided to always use curly braces.



FAQ: What does it mean to chain else if statements, and how does it work?
You can write an if then an else and inside that else write another if, and on and on.
##REF##code,
if (a == 3) {
	// Something
} else if (a < 3) {
	// Something
} else if (a > 3) {
	// Something
}
##REF##
However again this can potentially negatively impact code readability if you have a super long chain, so always ask yourself if this really is the best way to achieve what you're trying to do? Or perhaps you could place this testing logic in a Switch or a Function.



------------



####### Lecture Switch

#### FREQUENTLY ASKED QUESTIONS
FAQ: How is a switch different from chaining multiple ifs?
It's visually cleaner and easier to understand, although technically yes you can do everything you do in a switch in a series of ifs



FAQ: What happens if the variable used in the switch doesn't match any of the cases?
If the switch contains a <b>default:</b> it will run that code, if not then nothing inside the switch runs and the code continues executing after the switch code block.



FAQ: What is the purpose of the break; statement in a switch case?
It breaks the code execution at that point and jumps down to the end of the switch code block.



FAQ: Is the default case required?
No, it is optional.
If you don't include a <b>default</b> and it does not match any case then it simply does not run any code inside the switch.


FAQ: Is it possible for one switch case to fall into another? Why would this be used?
Yes, you can define various cases that run common code like this:
##REF##code,
switch (name) {
case "Code Monkey":
case "Iron Man":
	Console.WriteLine("Hello Code Monkey or Iron Man!");
	break;
}
##REF##
However the top case cannot have any code in it, this is not valid code:
##REF##code,
switch (name) {
case "Code Monkey":
	Console.WriteLine("Hello Code Monkey!"); // Error
case "Iron Man":
	Console.WriteLine("Hello Code Monkey or Iron Man!");
	break;
}
##REF##



FAQ: How do I choose between using an if statement and a switch statement?
If you're testing one variable against just one value, use an if
If you're testing one variable against multiple values, use a switch



FAQ: What is a real world example of where switch cases are commonly used?
One common use case, in game development, is building a simple State Machine.
This is widely used when making some AI code where you want different logic to run depending on the state of the unit.
##REF##code,
switch (state) {
    case State.Patrolling:
       // Patrol logic
       break;
    case State.MovingTowardsTarget:
       // Move towards target
        break;
    case State.AttackingTarget:
       // Attack target
       break;
}
##REF##
In this case state is an Enum, I cover enums later on in the Intermediate section of the course.



------------



####### Lecture Functions

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a function in programming, and why are they used?
A function is a nice way to organize a piece of code into a single code block that can easily be called multiple times.
One big benefit is reducing copy pasted code. If you have some logic that you use multiple times in your program/game, instead of copy pasting that logic tons of times you just make a function and you call that function when you need to.
That also means that if you want to modify that logic you just have to modify it in a single place instead of multiple places.
Technically you can write your entire program in just one giant Main() function. But separating logic into multiple functions is much better.
So they are used to help with code reusability and simply to make your code much more understandable.



FAQ: What does it mean to "call" a function?
It simply means you run the code inside that function.
Remember how code executes from top to bottom, when you call a function the code execution simply jumps inside the function, executes that code top to bottom, and when the function ends it jumps back to where it was called and continues executing.



FAQ: What is the simplest function definition? void MyFunction();
The simplest function would be one that that returns nothing (void) and takes no parameters, like this:
##REF##code,
void MyFunction() {
    // Do something
}
##REF##



FAQ: What is void?
It simply means 'nothing', it means no type.
If you don't want to return any data from a function you use void as the return type.



FAQ: What is the return type?
That's the type of data that function will return to whatever piece of code called that function.
##REF##code,
int number = GetThree();
Console.WriteLine(number); // 3
---------------
int GetThree() {
    return 3;
}
##REF##
If you define a return type then you MUST write a return statement, if not you get a compile error.



FAQ: What if I don't include a return type?
You have to include a return type, if you don't want to return anything you need to use void



FAQ: What if I don't include any parameters?
That's perfectly fine, functions can have any number of parameters, including 0.



FAQ: How many parameters can I define in my function?
As many as you want.
Although remember the goal to keep your code as readable and understandable as possible. The more parameters you add to a function the harder it becomes to understand.
If you have a function that requires a dozen parameters to work, perhaps consider defining a class or struct to hold that parameter data and replace all those parameters with a single parameter of that type.



FAQ: What types can I use as the return type? What about parameters?
You can use any type you want for return or parameters. They can be simple types like ints and bools or complex classes that you define yourself.



FAQ: Can you return multiple pieces of data from a function?
Technically no, the return type has to be a single type.
So this is not valid code
##REF##code,
string, int GetNumber(); // Error
##REF##
However you can make a class/struct that holds multiple pieces of data and return that
##REF##code,
struct NumberName {
    public string name;
    public int number;
}
NumberName GetNumber() {
    return new NumberName {
        name = "Code Monkey",
        number = 56,
    }
}
##REF##
Or alternatively for a more advanced method you can use Tuples
##REF##code,
(string, int) GetNumber() {
    return ("Code Monkey", 56);
}
##REF##
I cover Tuples in detail in the Advanced section of the course.



FAQ: Can you use the output of a function as input for another?
Yup! You can definitely call a function within the parameters of another function.
##REF##code,
MyFunction(AnotherFunction());
##REF##
The code will first run AnotherFunction(); and use the result of that function as a parameter when calling MyFunction();
However again keep in mind the goal to make your code easy to understand, while this next code is valid you probably shouldn't use anything like it:
##REF##code,
MyFunction(AnotherFunction(YetAnotherOne()), DoSomething(), SomethingElse(WithAnotherThing(AndMore(5))));
##REF##
If you need to do some really complex logic like this, consider storing the results of some of those functions in local variables and then call the final function using those variables as parameters.



FAQ: How does modifying a parameter within a function affect the original value?
It depends on what the type is. For simple types like int, float, bool, it does not affect the original memory at all
##REF##code,
int age = 35;
ChangeAge(35);
Console.WriteLine(age); // Still 35
------------
void ChangeAge(int age) {
    age++;
}
##REF##
However for reference types, like List and Classes, those are passed in as a reference so if you modify them inside the function it will modify them outside of it.
##REF##code,
List<int> myList = new List<int>();
ChangeList(myList);
Console.WriteLine(myList.Count); // 1, not 0
-----------------
void ChangeList(List<int> myList) {
    myList.Add(5);
}
##REF##
This difference between Value and Reference types is really important, there is a dedicated lecture on this topic later on in the Intermediate section.



FAQ: Can variables defined inside a function be accessed outside of it?
No, variables that are defined in a function are local variables for that function and as such they do not exist outside the function.
Same thing for function parameters, those are also local variables and are also inaccessible from outside.
If you want to get data from a function you need to use the return type (or a reference type in a parameter, or an out parameter)



------------



####### Lecture Scope

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does 'scope' mean in programming?
It simply means the accessibility/lifetime of some symbol (variable/function/class)
If you define a function local variable, the scope is only within that function. As soon as the function ends the local variable is disposed of so nothing else can access it.
When it comes to scope, always remember to look at the curly braces. If you define something within a curly brace (class, function, etc) then that something is only accessible from within that code block and any child code blocks.
##REF##code,
int a = 5;
if (true) {
	a++; // Valid because a was defined outside this code block
	int b = 3;
}
b++; // Error because b was defined in a child code block that no longer exists.
##REF##


FAQ: Why can't I access a variable defined in one function from another function?
Because a local variable declared inside a function only exists within that function.
As soon as the function code block ends, the local variables are disposed and no longer exist.
If you want to get data from a function you need to use the return type (or a reference type in a parameter, or an out parameter)



FAQ: Can I use a variable defined inside an if statement outside of it?
No, if you define a local variable inside an if statement you can only use it within that if statement's code block or any nested code blocks, not outer code blocks.



FAQ: What happens to a variable after its code block ends?
The variable is marked for garbage collection and will eventually be cleaned up and completely removed from memory.



FAQ: Is it possible to keep a variable's value after its scope ends?
No, when the scope ends the variable is destroyed. If you want to keep the data you need to somehow pass that data to another variable/function/class with the scope that you need.



FAQ: How can I share a variable across multiple functions within a class?
You can make a class variable (field) which has the scope of the entire class and as such can be accessed by anything within that class.



FAQ: What is the difference between a local variable and a class variable (field)? 
Local variables only exist where they are defined, so if declared inside a function they only exist within that function.
Whereas a class variable (field) exists within that class and can be accessed by any code within that class.
But both follow the same rule in that they only exist in the code block that they are defined in. So in that sense they are the same thing and all that matters is in what code block they are defined in.



FAQ: Are function parameters considered local variables?
Yes, function parameters are only defined within that function.



FAQ: Can you use a variable before it is declared?
No, remember how code runs from top to bottom, thus if you define a variable you cannot access it on any line above it before it is declared.



FAQ: What are some common mistakes beginners make related to variable scope?
They simply do not understand how scope works and they try accessing a function local variable from another function and do not understand why it does not work.
So remember scope, always look at the code blocks to see if the symbol you're trying to access is accessible from within where you are writing the code.



FAQ: Why is scope an important concept to master in programming?
Scope is extremely important in helping you minimize access, which is one of the most important guidelines for writing good clean code.
The more you limit the accessibility of some variable, the easier it is to keep in your mind all the ways in which that variable can be accessed.
If you have a class with a thousand functions, and you make a class variable (field), then you have no idea which of those thousand functions might use that field.
However if you have a thousand functions and in one of them you have a local variable, you know for certain that nothing else can touch that variable, so it does not matter if the class has a thousand or ten thousand functions. When working with that variable you know for sure that only code within that function can access/modify that variable.



------------



####### Lecture Comments

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are comments?
They are simply text that you can write in your code that is ignored by the compiler, it is not executed as if it were code.
So they are good for writing human readable text that accompanies your code.



FAQ: What is the syntax for a single line comment and a multi-line comment?
For a single line comment you write two forward slashes
##REF##code,
// This is a single line comment
##REF##
For a multi line comment you write forward slash star and then end with star forward slash
##REF##code,
/*
  This is a multi
  line comment
*/
##REF##


FAQ: Do comments affect how a program runs?
No, comments are completely ignored by the compiler as if they don't even exist.
So you can write any text you want, even something that would be valid code, and it won't affect execution because the compiler will completely ignore any text in a comment.



FAQ: Can I place comments anywhere in the code?
Yes, comments are just text so you can write them anywhere.
They can be inside a function, inside a class, outside of a namespace, etc, anywhere you want.



FAQ: Is it possible to add comments at the end of a line of code?
Yup, you can do either of these
##REF##code,
int age = 35; // My age
int age = 35; /* My age */
##REF##


FAQ: Is it possible to add comments before a line of code?
With the single line method you can't because anything after the double slashes is considered a comment until a new line.
All of this is a comment, there is no age variable defined:
##REF##code,
// comment; int age = 35;
##REF##

But yes you can add comments before with the multi-line method, like this:
##REF##code,
/* comment */ int age = 35;
##REF##

However you should avoid this at all costs, making comments in the beginning of the line can make the code really confusing and hard to read.
So usually you should only write comments either on their own line or at the end of the line after the code.



FAQ: How can good variable and function names reduce the need for comments?
Look at this code:
##REF##code,
float a = 5; // Attack distance
if (DsTrg() < a) { // If under the attack distance
	At(); // Attack enemy
}
##REF##
Without comments this code is pretty much impossible to understand
However instead of writing comments you can just use proper names for the variables and functions:
##REF##code,
float attackDistance = 5;
if (DistanceToTarget() < attackDistance) {
	AttackTarget();
}
##REF##
This way the code is very clear about what it is doing with no need for comments.



FAQ: What are some best practices for writing comments in C#?
The first best practice is simply first try to avoid them, try to choose good names for your variables and functions to make your code clear just by reading the code.
But sometimes even though the code is clear it could use some extra clarification, this is where you can write a comment
So in general don't write comments that just explain what the code is doing, the code should be readable enough that you understand what it's doing just by reading the code.
Instead comments should be used more to explain the why behind the code.



FAQ: How many comments should my code have?
As few as you can while keeping the code intent clear.
Sometimes that's zero comments, sometimes that's a handful.
First write your code properly, and only use comments if you absolutely need to.



FAQ: Can comments be used to temporarily disable parts of code?
Yup you can definitely do this. I do it all the time when writing some new system and I want to try out various approaches.
However only do this temporarily. After your code is solid and it's doing exactly what you want it to do, after that go back and remove the old commented code.
If you don't, then later on when you come back to that code you will not remember why you commented it out.
So it's okay to comment out code temporarily while trying out various approaches, but remember to clean it up afterwards.



------------



####### Lecture ArraysLists

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an array in C#, and how do I create one?
An array is simply a way to store multiple elements as opposed to a single variable that can only store a single element.
You define it by writing the type and then square braces.
##REF##code,
int[] intArray; // This is an array of ints
##REF##



FAQ: What are the various ways to create and initialize an array?
Here are the various ways:
##REF##code,
int[] intArray; // Just defines the variable, uninitialized
int[] intArray = new int[5]; // Creates an array of ints with a size of 5
int[] intArray = new int[] { 1, 2, 3 }; // Creates an array of ints with the elements 1, 2, 3
int[] intArray = { 1, 2, 3 }; // Creates an array of ints with the elements 1, 2, 3
##REF##


FAQ: How do I access and modify the elements of an array?
You access it by writing square braces with an index inside it.
##REF##code,
intArray[0]; // Grab the first element of the array
##REF##
Always remember how array indexes start at 0 and not 1, so if you want the first element of the array you use [0], if you want the second you use [1], etc.
Also because of that same reason the last index is not on [array.Length] but rather [array.Length-1]



FAQ: Why do array indexes start at 0 instead of 1?
Arrays are really just multiple elements stored in memory, and you access elements of that array using an offset relative to the starting memory position.
The first element of the array will be on the first memory position which has an offset of 0.
For example here is some memory storing an array {1, 2, 3} where the array is stored at memory location F4A0
// F4A0 = 1
// F4A1 = 2
// F4A2 = 3



FAQ: What does it mean that arrays have a fixed size?
It means when you create an array you give it a size and that size cannot change. You cannot make the array bigger or smaller.
Whatever size you define when you construct the array is the size it will always have.



FAQ: How can I resize an array?
You can't, arrays cannot be resized. The only thing you can do is create a new separate array with the new size and then copy elements from the old array onto the new array.



FAQ: How can I check how many elements are in an array?
You can access the array.Length which will return the size of the array.



FAQ: What are lists and how do they differ from arrays?
Lists are built on top of Arrays and provide extra functionality.
Main difference is how arrays are fixed and cannot be resized, whereas Lists have a dynamic size where you can Add(); or Remove(); elements.
In the background what the list is doing is simply keeping track of an internal array, and when you Add(); an element to the list it will resize the internal array with length+1 and copy all the elements to the new array and add your new element.



FAQ: How do you create a list?
You define the list with a particular type, then just construct it using the new keyword, and optionally with some preset elements.
##REF##code,
List<int> intList = new List<int>(); // Creates a new empty list
##REF##
By the way the syntax of the angled brackets < > is a Generic which allows the List to work with any type.
Generics are covered in detail in a Lecture in the Intermediate section.



FAQ: What does the syntax of the angled brackets mean?
It means a Generic, it's how the List can be made to work with any type.
Generics are covered in detail in a Lecture in the Intermediate section.



FAQ: How can I add or remove elements from a list?
You simply call the functions Add(); or Remove();
Or alternatively when working with indexes you can Insert(); or RemoveAt();



FAQ: How can I get the number of elements in a list?
You can check list.Count which is equivalent to array.Length;



FAQ: What is the difference between Length in arrays and Count in lists?
No difference, both return the number of elements in the collection.



FAQ: How do you find elements in a list using Contains and IndexOf?
You can check if a list contains an element with list.Contains();
And you can get the index of the first occurence of that element with list.IndexOf();
If the list does not contain the element then IndexOf(); returns -1
##REF##code,
List<string> nameList = new List<string>() { "Code Monkey", "Iron Man", "Spider-Man" };
Console.WriteLine(nameList.Contains("Code Monkey")); // true
Console.WriteLine(nameList.IndexOf("Spider-Man")); // 2
Console.WriteLine(nameList.IndexOf("Black Widow")); // -1
##REF##


FAQ: How does finding an element in an array differ from finding it in a list?
To get an index from a list you can do IndexOf(); but that function does not exist on the array
##REF##code,
list.IndexOf(element); // Works
array.IndexOf(element); // Does not work, array does not have function 'IndexOf()'
##REF##
To do that with an array there is a static function in the Array class
##REF##code,
Array.IndexOf(array, element); // Works
##REF##


FAQ: When should I use an array and when should I use a list?
If you have a fixed set of elements, use an Array
If you have a dynamic number of elements, use a List
If you need absolute performance, use an Array
If you want ease of use, use a List



FAQ: What other types of collections exist other than arrays and lists?
There is Dictionary, Stack, Queue, HashSet, SortedList, SortedDictionary and more.
There is a dedicated lecture on Dictionary and Other Collections later on in the Intermediate section.



------------



####### Lecture Loops

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a loop in programming?
A loop is simply a way to run logic multiple times.
So whereas normal code runs just once from top to bottom, by using loops you can run the same code as many times as you want.



FAQ: What are the 4 loop types?
You have while, do while, for and foreach



FAQ: What is the syntax for a while loop?
##REF##code,
while (CONDITION) {
    // Do something
}
##REF##


FAQ: What is the syntax for a do while loop?
##REF##code,
do {
    // Do something
} while (CONDITION);
##REF##


FAQ: What is the syntax for a for loop?
##REF##code,
for (ITERATOR_INIT, CONDITION, ITERATOR_INCREMENT) {
    // Do something
}
##REF##


FAQ: What is the syntax for a foreach loop?
##REF##code,
foreach (ITERATOR_VARIABLE in COLLECTION) {
    // Do something
}
##REF##


FAQ: What happens if the loop condition is always true?
Then you have an infinite or endless loop that will never end.
If you run it in a console it will run forever.
If you run it in Unity, it will crash.



FAQ: What happens if you have an infinite loop?
If you run it in a console it will run forever.
If you run it in Unity, it will crash.



FAQ: What is the difference between a while loop and a do while loop?
The main difference is how the do while loop is guaranteed to run at least once, because the condition is tested at the end.
Whereas the while loop will test the condition first and only run if the condition is true.
##REF##code,
do {
    // This code will run
} while (false);
while (false) {
    // This code will NOT run
}
##REF##


FAQ: How do I write a while loop that runs 3 times?
##REF##code,
int i = 0;
while (i < 3) {
    Console.WriteLine(i);
    i++;
}
##REF##


FAQ: How do I write a do while loop that runs 3 times?
##REF##code,
int i = 0;
do {
    Console.WriteLine(i);
    i++;
} while (i < 3);
##REF##


FAQ: How do I write a for loop that runs 3 times?
##REF##code,
for (int i = 0; i < 3; i++) {
    Console.WriteLine(i);
}
##REF##


FAQ: How do I write a foreach loop that runs 3 times?
A foreach loop runs on some kind of collection, so to run 3 times it means the collection has 3 elements.
##REF##code,
int[] intArray = new int[] { 1, 2, 3 };
foreach (int i in intArray) {
	Console.WriteLine(i);
}
##REF##


FAQ: What are the three components of a for loop?
You have the Initializer where you usually create an initialize a iterator variable.
Then the condition that is tested every time the loop runs and stops the loop when the condition is false.
And the Incrementer where you usually increment the loop iterator variable by one.
##REF##code,
for (ITERATOR_INIT, CONDITION, ITERATOR_INCREMENT) {
    // Do something
}
##REF##


FAQ: How do I write a for loop that iterates through an array or list?
##REF##code,
string[] stringArray = new string[] { "Code Monkey", "Iron Man", "Spider-Man" };
for (int i = 0; i<stringArray.Length; i++) {
    Console.WriteLine(stringArray[i]);
}

List<string> stringList = new List<string>() { "Code Monkey", "Iron Man", "Spider-Man" };
for (int i = 0; i<stringList.Count; i++) {
    Console.WriteLine(stringList[i]);
}
##REF##


FAQ: How do I write a foreach loop that iterates through an array or list?
##REF##code,
string[] stringArray = new string[] { "Code Monkey", "Iron Man", "Spider-Man" };
foreach (string name in stringArray) {
    Console.WriteLine(name);
}

List<string> stringList = new List<string>() { "Code Monkey", "Iron Man", "Spider-Man" };
foreach (string name in stringList) {
    Console.WriteLine(name);
}
##REF##


FAQ: Do I need to manually keep track of an iterator variable when using a foreach loop?
No, the iterator is handled automatically and updated while the foreach runs for as long as there are elements in the collection.



FAQ: What are some common mistakes that lead to infinite loops?
The main one is simply some mistake in the condition, usually mistaking < instead of > or similar.
Alternatively forgetting to use some kind of iterator variable in a while or do while
Or doing i--; instead of i++;
Always pay very close attention to your condition and your iterator variable.
Or simply prefer to use the foreach whenever possible since that one never has an infinite loop.



FAQ: How do I write some safety code to prevent infinite loops?
This code tries to find a target for the player, but if that never succeeds you would end up with an infinite loop.
So you can define a safety variable that will make sure the code only runs at most 100 times and guarantees you never have an infinite loop.
##REF##code,
int safety = 0;
while (!PlayerHasTarget() && safety < 100) {
    PlayerFindTarget();
    safety++;
}
##REF##


FAQ: Should I use a for or a foreach to cycle through a list or array? Cannot modify while looping
You should probably prefer a foreach over a for since it is much simpler to implement.
However one thing you cannot do in a foreach is modify the collection that you are cycling through.
This code will throw an error:
##REF##code,
foreach (string name in nameList) {
    nameList.Remove(name); // Cannot modify collection while cycling through it!
}
##REF##
So if you need to do this kind of thing use a for instead



FAQ: Can a loop be used inside another loop? What is a nested loop?
Yup! You can have loops inside other loops, these are nested loops.
There is a dedicated lecture on Nested Loops later on in the Intermediate section.
As always keep in mind your main goal of writing clean readable code. The more nested loops you have the harder it is to understand what the code is doing, so use them sparingly.



FAQ: What is the scope of variables declared within a loop?
They only exist within that loop (and any nested loops), just like any other code block.



------------



####### Lecture Class

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a class in C#?
A Class is a data structure that you can define to create your own custom types.
They can have fields, properties, functions, events and all kinds of data and logic.



FAQ: Is a Class the same as a Type?
Sort of, making your own Class is a way of making your own Type.
For example when I say "function parameters can have any type you want" yup that means you can define a class and use that class type as a function parameter or variable or anything where you can use a type.
But there are also other ways to make types, like Enums and Structs, which I will cover in detail in the Intermediate section.



FAQ: What kind of 'thing' can I make into a class? Anything you want, Player can be a class, so can Weapon or Skill or World.
Anything you want, it's up to you to define what the class represents.
Player can be a class, so can Weapon or Skill or World.



FAQ: What is an instance of a class?
That is when you create an object of that class.
The class is basically a blueprint, and you can create objects or instances of that class using that blueprint.
It's important to keep in mind that objects created from the same class are independent. They come from the same blueprint but they are completely separate objects.
In this code Player1 and Player2 are two completely separate objects, they have the same data structure but each has their own data in memory.
##REF##code,
Player player1 = new Player();
Player player2 = new Player();
##REF##


FAQ: How do I define a class and create an instance (object) of that class?
To define a class you just need the class keyword
##REF##code,
class Player { }
##REF##
Then to create an instance of that type, you just use the new keyword to call the constructor
##REF##code,
Player player = new Player();
##REF##



FAQ: What is a constructor?
The constructor is a special function that runs as the object is created.
By default all classes have a parameterless constructor even if you don't explicitly define it.
They are usually used for setting up the object that is being created.



FAQ: Can a constructor have parameters?
Yup! You can have constructors with no parameters or with as many parameters as you want.



FAQ: Can you have multiple constructors?
Yup! The only limitation is they need to have different parameters, either a different number of different types.



FAQ: What is the difference between a variable and a field?
Those two terms are mostly interchangeable.
Technically a variable is something like a local variable defined inside a function.
And technically if you define a class variable the correct term for it is field.
However most people will understand what you mean if you use either term.



FAQ: Can you create an instance of a class and initialize the object right away?
Yup! You can use curly braces and initialize that object (assuming the fields are public)
##REF##code,
public class Player {
    public string playerName;
    public int playerHealth;
}
---------------
new Player() {
    playerName = "Code Monkey",
    playerHealth = 100
};
##REF##


FAQ: Can classes contain methods (functions)?
Yup! You can define functions inside a class just like we learned previously.
To access that function you simply need to through the object of that class type.
For example if you have a Player class that has a function name Attack(); and you created an instance of that player you call it with this
player.Attack();
Note how we're calling the function through the instanced object and not the class name itself. This is important because in this scenario the Attack(); function is not marked as static.



FAQ: How do you define a function in a class and call it from somewhere else?
You define a function as normal, like this:
##REF##code,
public void Attack() {
    // Attack something
}
##REF##
Then you call it like this:
##REF##code,
Player player = new Player();
player.Attack();
##REF##
Note how we're calling the function through the instanced object and not the class name itself. This is important because in this scenario the Attack(); function is not marked as static.



FAQ: What is the difference between class variables (fields) and local variables?
The difference is scope.
Local variables have a scope of the code block where they are defined, so if defined within a function they are only accessible within that function.
Class variables also have the scope of the code block where they are defined, but in this case the code block is the class code block meaning class variables are accessible from any code within that class like any function.



FAQ: What is the this keyword? How is it used?
this refers to the instanced object where that code is running on.
So if you have two player objects and you call a function on them where that function uses this, it will refer to the object where the function is running.
##REF##code,
public void PrintThis() {
	Console.WriteLine(this);
}
------------
Player player1 = new Player();
Player player2 = new Player();
player1.PrintThis(); // Will print 'player1'
player2.PrintThis(); // Will print 'player2'
##REF##


FAQ: When do you need to use this?
It's particularly useful when you have multiple symbols with the same name, like a class variable and a function parameter that has the exact same name.
In that case if you just write the name the code will assume you are referring to the function parameter and not the class variable.
In order to explicitly refer to the class variable you use the this keyword to access the object directly and reference the class variable.
##REF##code,
private float speed; // Class variable
public void SetSpeed(float speed) {
    this.speed = speed; // Assign the class variable to the value received in the parameter
}
##REF##


FAQ: What does it mean that each object instance has its own state?
It means that if you create 2 players from a class that has a playerName field, each of those players can have different names because each object instance has its own memory. 
Each separate object has its own state.



------------



####### Lecture Static

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does the static keyword mean in C#?
It means that you are defining something as belonging to the class itself and not any instance of that class.
For example a static field belongs to the class itself and not any instance of that class.
If you have a Player class with a static playerName then it does not matter how many players you create, there is only ever one instance of that static playerName field.



FAQ: How does a static method differ from a non-static method?
A Static method belongs to the class itself and not any instance of that class.
So to call that method you call it through the class name itself.
For example if this function is defined in a Player class, you call it like this:
##REF##code,
public static void TestFunction() { }
---------------
Player.TestFunction();
##REF##
If you do this following code it will give an error because you cannot access a static function from an instance of the class.
##REF##code,
Player player = new Player();
player.TestFunction();
##REF##


FAQ: How does a static field differ from a non-static field?
A static field belongs to the class itself and not any instance of that class.
So to access that field you access it through the class name itself.
For example if this field is defined in a Player class, you access it like:
##REF##code,
public static string playerName;
---------------
Player.playerName = "Code Monkey";
##REF##
If you do this following code it will give an error because you cannot access a static field from an instance of the class.
##REF##code,
Player player = new Player();
player.playerName = "Code Monkey";
##REF##


FAQ: How do you call a static function?
You call it through the class name itself and not any instance of that class.
For example if this function is defined in a Player class, you call it like this:
##REF##code,
public static void TestFunction() { }
---------------
Player.TestFunction();
##REF##
If you do this following code it will give an error because you cannot access a static function from an instance of the class.
##REF##code,
Player player = new Player();
player.TestFunction();
##REF##


FAQ: How do you access a static field?
You access it through the class name itself and not any instance of that class.
For example if this field is defined in a Player class, you access it like:
##REF##code,
public static string playerName;
---------------
Player.playerName = "Code Monkey";
##REF##
If you do this following code it will give an error because you cannot access a static field from an instance of the class.
##REF##code,
Player player = new Player();
player.playerName = "Code Monkey";
##REF##


FAQ: How are static fields shared across all instances of a class?
If you have a static field then it does not matter how many instances of that class you create, there is only ever one instance of that static field.
Any of those objects can access the static field and they will all be accessing the same data in memory.



FAQ: Can static methods access non-static fields or methods in a class?
No, at least not without a reference to a particular object of that class type.



FAQ: Can non-static methods access static fields or methods in a class?
Yes, you can call it or access it by going through the class name itself.



FAQ: How do I decide when to make something static or non-static?
It depends whether what you're trying to build is meant to be something that each individual instance of that class is meant to have, or if it's something that the type itself should have.
For example, on a Player class the playerName should probably be non-static so that different players can have different names
But then a field to store the totalNumberOfAllPlayerKills should be static since it represents data from all players.



FAQ: Can a class be declared as static? What does that mean?
Yes, if you mark a class as static then you are required to define everything inside that class as static. Meaning all fields, properties and functions need to be marked as static.
If you want everything to be static, make the entire class static.
If you want to mix static and non-static leave the class itself as non-static.



------------



####### Lecture AccessModifiers

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are access modifiers in C#, and why are they important?
This is what defines how accessible a certain field/function can be. If defines whether a different class can access that field or not.
Access modifiers are extremely important because they help you limit access and you should limit access as much as possible since that is one of the best ways to manage complexity.
I talk about this topic in more detail in the Clean Code Guidelines lecture in a bit.



FAQ: What is the difference between public and private access modifiers?
public means it is accessible from anywhere.
So if you mark a field as public then any class in your entire codebase can access and modify that field.
Whereas if you mark it as private, then only that class itself can ever access or modify that field. It does not matter if you have 10 classes or 1000 classes in your entire project, only that class can access it.
This means that as you write code if there is a bug in a private field you know for certain the bug can only exist within that class since nothing else can access it.



FAQ: Why shouldn't I make everything public?
By making it public you are making it accessible from any other class in your entire codebase. That means if you have some bug it could be coming from anywhere.
So in general you should minimize access as much as possible, that way when you encounter a bug it is much easier to think of where the bug might be coming from because it can only come from that one class and nothing else.
Always make everything private by default, only make it public if you absolutely need to.
I made an entire video on this particular topic and I'm going to talk about it more in the Clean Code Guidelines lecture.



FAQ: Why can't I access and call this function?
If you see the error message CS0122 "inaccessible due to its protection level" it means that you defined that field/function as private and you're trying to access it from some code outside that class.
If you really need to access it from another class, then change the access modifier from private to public



FAQ: What are the best practices for deciding what access modifier I should use?
By default you should always define everything as private.
Then if you ABSOLUTELY need to access it from somewhere else, you can switch to public.
Just following this one simple rule will make your code much better.



FAQ: Are there any other access modifiers in C# besides public and private?
Yes, there is protected, internal, sealed
I cover these in detail in the Intermediate and Advanced sections.



FAQ: What happens if I don't specify an access modifier for a class member?
For a class member it will default to private
However I highly advise you to always explicitly define your access modifiers to avoid any confusion.
Depending on where you write code they will default to different things.
<a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers
</a>


FAQ: Do I have to always specify an access modifier?
You don't have to, you can omit it and it will default to something.
However I highly advise you to always explicitly define your access modifiers to avoid any confusion.
Depending on where you write code they will default to different things.
<a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers
</a>



FAQ: Can a class itself be declared as private or public?
Depends on where you are writing.
If you are defining that class as a child of another class then yes and the same rules apply.
If you make it private then only the parent class can access that class.
However if you are defining that class as a main class inside a namespace then it must be public.



------------



####### Lecture NamingRules

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are naming rules in programming, and why are they important?
These are the rules that you follow in naming your various symbols (functions, variables, properties, etc)
They are EXTREMELY important. Following a consistent set of rules is the easiest way to massively improve the quality of your code.
If you don't follow any naming rules your code will be a mess and really hard to understand.



FAQ: What are the best naming rules? Which ones should I follow?
There are no 'best' naming rules, you can follow pretty much any naming rules you want, the most important thing is that you are consistent.
Don't write one file using one set of rules and another one following a completely different set of rules. Be consistent.
In the lecture I talk about my own naming rules that I have defined in over 10 years of working with C# but you don't have to follow my own, there are plenty of different valid code styles.



FAQ: How should I name functions, variables, and classes in C#?
The important thing is that you are consistent.
Personally the rules I follow are PascalCase for functions, camelCase for variables and PascalCase for classes.



FAQ: Can you provide examples of PascalCase, camelCase, and snake_case?
PascalCase: First letter of every word is capitalized.
camelCase: First letter is lower case, every other first letter of every word is capitalized.
snake_case: Words are separated with an underscore.



FAQ: What naming rules do you follow?
##REF##code,
// Constants: UPPER_CASE_SNAKE_CASE
public const int CONSTANT_FIELD = 56;

// Properties: PascalCase
public static GameManager Instance { get; private set; }

// Events: PascalCase
public event EventHandler OnSomethingHappened;

// Fields: camelCase
private float memberVariable;

// Function Names: PascalCase
private void MyFunction() {
    DoSomething(10f);
}

// Function Params: camelCase
private void DoSomething(float time) {
    // Do something...
    memberVariable = time + Time.deltaTime;
    if (memberVariable > 0) {
        // Do something else...
        OnSomethingHappened?.Invoke(this, EventArgs.Empty);
    }
}
##REF##


FAQ: Is it better for a variable to be short or descriptive?
Descriptive.
Always make the variables as explicit as possible. There is no limit to how big a name can be so always value being more explicit and descriptive than trying to make it super compact.



FAQ: Why shouldn't I use abbreviations and acronyms?
Because while those abbreviations and acronyms might seem perfectly obvious right now while you are writing the code, when you come back to that same code later, or when another programmer looks at your code, they are no longer obvious.



FAQ: What are some common mistakes beginners make with regards to naming conventions? Not being consistent
The biggest mistake is simply not following any rules.
If you write one variable using PascalCase and the next variable using camelCase and another one using snake_case (or even worse just make it all lowercase)
If you do that then the code becomes really hard to understand since there's no logic to anything.
The other big mistake is simply not being consistent.
If you follow one set of rules for one file and another set of rules for another file, then it becomes really hard to quickly switch back and forth.
So pick a set of naming rules and follow them all the time.



FAQ: If I name a variable something, can I change the name later?
YES! Always remember that names are not set in stone. Sometimes you give something a name that sounds good at the time, and later on you think of a better name, that's okay.
If that happens just take a few seconds to rename that function to the new better name.
Code is NOT set in stone. Refactoring is a perfectly normal and very important part of the process.
There is a lecture dedicated to Refactoring on the Intermediate section because it is a very important topic.



FAQ: What does the prefix m_ mean? Should I use it?
Usually it means 'member' and is usually applied to class member fields.
Like I said naming rules can be whatever you want, as long as you are consistent.
So personally I do not follow this rule, personally I don't find it helpful, I think it just adds needless noise, but that's just me.
A lot of people do like that prefix so if that's you go ahead and use it.



FAQ: What naming rules should I follow if I'm working in a team?
If this is a team you are joining then they likely have already defined a code style so you should follow the rules they have already set.
Don't try to impose your own rules. Remember the most important thing is consistency, so if you are joining an already existing project then adapt your code to their rules.



FAQ: What are some good resources to learn more about naming rules and good code practices? Code Complete, Kitchen Chaos
I highly highly recommend the book Code Complete 2.
It is absolutely excellent and reading through that whole book has increased my own programming skills 100x!
It's definitely a thick book with 800 pages so it will take you a while to get through it, but if you do and you fully understand everytihng you will massively improve your skills as a programmer.
Or if you want to see me apply my own rules you can check out my courses, specifically my Kitchen Chaos course which is targeted at beginners but despite that the code quality is on the same level as my own professional games, following all the code naming rules that I follow myself.



------------



####### Lecture CleanCodeGuidelines

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is clean code, and why is it important in programming?
There's a bunch of definitions of clean code, my definition is that clean code is simply code that is easy to understand, easy to read, and easy to modify.
It is very important because the more you focus on writing good clean code the easier it will be to work in your codebase.
Sometimes beginners don't value this because they make super tiny projects that are just a handful of lines. And with such simple projects writing code properly or terribly doesn't do that much of a difference.
But as you start working on more complex projects with many more classes and many more interconnected systems, if you write dirty code then at some point you will be completely overwhelmed by all that unnecessary complexity and will likely give up at some point.
Whereas if you always focus on writing good clean code then even on larger projects it is still manageable and easy to work it.



FAQ: My code works, why should I care if my code is clean or dirty?
Because the dirtier your code the harder it is to work with.
For super simple things "just works" might be enough, but as your projects grow in complexity then "just works" isn't enough. If something "just works" but it takes you one hour to read the code to understand HOW it's working then that is a hugely wasteful time sink.
If you're making some throwaway code then sure "just works" will work, but if it's some code that you want to be actually useful in the future then make it work properly.



FAQ: How do naming conventions contribute to clean code?
If you use proper names for all your symbols then understanding the code is as easy as reading English. 
Whereas if you write your code following some bad (or worse, no) naming rules, then you need to read and re-read your code a ton of times in order to figure out exactly what the code is doing.
If you have a variable named "dfkjk" then you have no clue what on earth that means and how it might be used, whereas if the variable is named "attackRange" then it's extremely clear what the variable represents and how it might be used.



FAQ: What does minimizing complexity mean? What is minimizing access?
As your code base grows and you have more and more classes naturally it becomes more and more complex. Minimizing complexity is simply exactly what it says, try to keep complexity at a minimum as your project grows.
The simplest way to do that is to minimize access.
If you mark some variable as public then any code anywhere in your entire codebase can modify it, so if that variable causes some bug you need to keep the entire project (which might be hundreds or thousands of classes) in your brain in order to debug the problem.
Whereas if you mark a variable as private, if there is a bug you know for certain the bug has to be coming from that class itself since nothing else can access it.
In that example by minimizing access you are minimizing complexity by minimizing the number of things you have to keep in your head as you're working with that code.
It does not matter if your codebase has 10 or 1000 classes, if a variable is private then all that matters is just that one class.
This is why you should always default to making everything private, and only make it public if you have a very good reason to.



FAQ: What are 'magic numbers', and why should they be avoided?
Magic numbers are numbers that show up in the code that make it really tricky to understand what exactly it represents.
For example in this code, what does 5 mean?
##REF##code,
if (Distance(playerPosition, enemyPosition) < 5) { }
##REF##
It's hard to tell just by looking at it, you need to read a bunch more code to understand what it represents.
Whereas on this code:
##REF##code,
int attackDistance = 5;
if (Distance(playerPosition, enemyPosition) < attackDistance) { }
##REF##
Now it's absolutely clear as to what the number represents.
So by using a properly named local variable we made our code much more easy to understand instead of using a magic number.



FAQ: Why is using strings as identifiers a bad thing?
Strings are very brittle, it is very easy to make a tiny mistake which then is really difficult to debug.
Look at all these strings, they all look extremely similar:
##REF##code,
"PLAYER10"
"PLAY3R10"
"PLAYERl0"
"PLAYER1O"
##REF##
At a glance they all look similar but they all reference completely different things. If you name some object like this and use the string to identify it then it is really easy to make some mistake.
And since the string itself is valid it won't show up as a compile error so it will only break when you run your code.
Whereas if you have a proper object reference, if you mistype the reference you get a very clear compiler error to help you:
##REF##code,
Player player10 = new Player();
Player10.DoSomething(); // 'Player10' does not exist
playerl0.DoSomething(); // 'playerl0' does not exist // lower case L instead of one 1
player1O.DoSomething(); // 'player1O' does not exist // O instead of zero 0
##REF##


FAQ: What is the single responsibility principle?
This principle says that code should do one thing and one thing only. This can be applicable to an individual function or an entire class.
For example your Player class should only be responsible for handling the Player object, it should not be responsible for handling Saving and Loading to a file. It should not be responsible for handling the Main Menu UI
If you have a function AttackEnemy(); then it should only attack the enemy, it shouldn't load the next Level or start some Boss fight.



FAQ: Why is it important to avoid using public access modifiers unnecessarily?
In order to minimize complexity by minimizing access.
The more you minimize how much each member can be accessed, the easier it is to debug when something goes wrong.
If something is private and has some bug, you know for certain that bug has to exist within that class, it cannot exist elsewhere in your code base since nothing else can access it, no matter whether the code base has 10 classes or 1000 classes.
So you should always default to making everything private, and only make it public when you absolutely need to.



FAQ: What role do comments play in clean code? Should I use them?
Comments are definitely a valuable tool, however they should only be used AFTER writing some proper clean code.
Ideally your code should be self-documenting, if someone reads just the code they should be able to understand what the code is doing.
But sometimes even when using proper names for everything, sometimes some part of the code might require some plain text explanation, and in those cases yup writing a comment is fine.
Just make sure you only write a comment when there's no way to write what you want to say in the code itself, which in most cases you can indeed make the code intent clear in the code itself just by using good names.



FAQ: How can I learn more about writing good clean code?
I highly recommend the book Code Complete 2.
It is absolutely excellent and reading through that whole book has increased my own programming skills 100x!
It's definitely a thick book with 800 pages so it will take you a while to get through it, but if you do and you fully understand everytihng you will massively improve your skills as a programmer.
Or if you want to see me apply my own rules you can check out my courses, specifically my Kitchen Chaos course. It is targeted at beginners but despite that the code quality is on the same level as my own professional games, following all the code naming rules that I follow myself.



FAQ: Should I follow these clean code rules religiously?
<b>NO!</b>
These are just guidelines, it is up to you as the programmer to know when to apply these rules and when to break them.
Always remember the main goal behind all of these rules and guidelines, the main purpose is to help you write code that is easier to understand and easier to work with which will make your life easier as you continue working in that code base.
For example, the Dont Repeat Yourself rule tells you to not have copy pasted code, however sometimes having a tiny bit of copy pasted code might be better than extracting into a function.
Or the Single Responsibility Principle, sometimes it might make sense for example for your Player to maybe fire some sound effects in a simple game instead of building an entire Sound Manager.
The goal of these rules is to help you, and it's up to you to analyze your project and your own code to figure out whether following the rules or breaking them will allow you to achieve that goal.
So in general you should follow them because in general they will help you, but you should also be aware that it's perfectly okay to break them when needed.



------------



####### Lecture BeginnerProject

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are some examples of good beginner projects?
In terms of general programming, good projects are things like making a Calculator, making a simple Number Guesser, a basic Chat Bot or a Countdown Timer.
Then in terms of game development, good beginner projects are things like Flappy Bird, Pong, Space Invaders.
I highly encourage you to build some tiny projects to really solidify all the knoweldge you have gained throughout the beginner section of this course.
In terms of game development, if you're looking for a guided step by step path then check out my Kitchen Chaos course, in there you can see how I use lots of the elements we covered in a real game.



FAQ: What is the purpose of creating small projects? Should I build some?
Yup you should definitely spend some time creating small projects.
The reason why I put so much effort into building the interactive exercises for this course is because you truly learn when you actually take the time to write some code yourself.
If you just blindly watch course after course you won't learn much, you need to actually put what you learned into practice.
So yes I highly advise you to make tiny simple projects to really put your knowledge to the test.
Although always remember that it's perfectly normal to google things, programming isn't about memorization so you're not expected to have memorized everything in all the courses. As a programmer your main skill is problem solving and by going through all these courses you learned and hopefully actually solved all kinds of problems.
Now with that knowledge you can go build some simple projects which will help really solidify that knowledge.



------------



####### Lecture IntermediateIntro

#### FREQUENTLY ASKED QUESTIONS
FAQ: What should I know before starting the Intermediate section?
You should have fully understood everything in the beginner section. 
Go browse the lecture list, if there's one topic you didn't fully understand then go back to it and rewatch it. The beginner section contains the absolute basics upon which the intermediate section is built upon, so you should fully understand those before continuing.

Also if it's been a while since you saw the beginner section the go rewatch the lecture on Naming Rules and Clean Code Guidelines. Those 2 topics become more and more important as you move onto the intermediate stage.


------------



####### Lecture VisualStudioShortcuts

#### FREQUENTLY ASKED QUESTIONS
FAQ: Why are shortcuts important? How do they help coding efficiency?
Shortcuts help you by simply helping you take code from your head and put it on screen.
One big way they help is by letting you keep your hands on your keyboard as much as possible. The less time you waste on moving your hand between your keyboard and your mouse the faster you will be.
Ideally you just stare at your screen while your fingers and your brain does all the work.
And in terms of why speed is important, the simplest answer is money. Time is money and the faster you can build a project the cheaper it will be.
For example I believe my speed is a very important reason as to why I have managed to make so many profitable games, it's because I can build in 6 months what takes someone else 2 years.
If I need $1000 per month to live, then a project that takes me 6 months to build will need to make $6000 to turn a profit. Whereas a project that takes 2 years will need $24000, that's a huge difference!



FAQ: Isn't problem solving a more useful skill than knowing shortucts?
The answer is both. Those two are not opposites, they work with one another.
Knowing what code to write, being able to solve problems, is indeed an extremely useful skill, possibly the most useful skill to know as a programmer.
But being able to efficiently take that code from your head and put it on screen is also an extremely useful skill.
So the answer is both. Focus on becoming a better problem solver AND a faster coder. If you have both skills you will be extremely efficient.



FAQ: What are the steps you took to quickly copy an entire line?
Use all the cursor shortcuts to quickly place the cursor on the line
Then to select the entire line, press on End to place the cursor at the end. Then hold shift and press Up, this selects most of the line but also some part of the line above.
Then while still holding shift press Home, this will make it so only the line you want is fully selected, it will also include a new line in the beginning which is important.
Then press Ctrl + X to cut that line. Meaning delete and copy at the same time.
Then again use all cursor shortcuts to go somewhere else.
On the target line, press End to go to the end, then press Ctrl + V to paste it.
If you're just now starting to use shortcuts than this whole process might seem tricky, but after you learn it and it becomes muscle memory it comes automatically. I never manually think about all these steps, I just do them.



FAQ: What is the Ctrl + , shortcut, and how does it help in navigating a codebase?
It brings up the Symbol Search window which allows you to search for any symbol (class, field, function, etc) in your entire codebase.
Super useful to use that shortcut, type in the name of the class you want, press enter and the file is opened.
Personally I never open classes by going into Unity and double clicking the file, I always just use this shortcut.



FAQ: What does "Find References" do? How is it useful?
It will find all instances in your entire codebase where that symbol is used.
This is excellent for finding where a certain variable is used, or all the classes that are listening to some event, or all the classes that implement a certain interface.



FAQ: How does auto-complete help?
Auto complete helps you by letting you write code faster by typing less.
You just need to get used to how it works, remember just how little of each symbol you need to write, so for example if you have a function TestFunction(); you can just type 'testf' and press Enter and it will write everything else.
Once you get used to it you can write a 50 character line of code by just typing 10 characters.
Importantly is how auto complete also makes sure to write the code perfectly with all the correct capitalization. This can be great for helping beginners avoid the most common mistakes.



FAQ: Am I expected to suddenly memorize all these shortcuts? 
No!
If you are just now learning about shortcuts it is perfectly normal that it takes you a while to memorize all of these.
My advice is that you revisit this lecture periodically, and over time these shortcuts will become easier and easier to remember just like they are to me. But it's normal that it takes some time, I've been writing code for 25 years so if you're a beginner just take your time and slowly learn it.



------------



####### Lecture Refactoring

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is refactoring, and why is it important in programming?
Refactoring is the act of rewriting some code to be more organized and easier to read.
Usually this involves changing names of functions/fields, placing certain logic in it's own class or just extracting some common logic into a separate function.
It's extremely important because it helps you keep your code as high quality as possible even as your project grows.
If you're working in your codebase and you see an opportunity to improve some code, take some time to do exactly that. If you do then even as your project grows more and more in complexity it will still be easy to work with.



FAQ: How do I know if my code needs refactoring?
Any situation in which you see that the code could be written in a better way.
Maybe you have some duplicated code, maybe super huge functions or classes, maybe confusing names.
Perhaps you first wrote some logic and just used random non-sensical names, if so take some time to refactor that code with proper names. Use the Ctrl + R + R shortcut to easily rename every instance of that symbol.
Perhaps initially your game only needed one Player but later on you realize you want more players. Go back to that code and refactor all the places where you made the assumption that there would only be a single player in your entire game.
The specific type of refactoring that is required differs on a case by case basis so there are no hard rules. Just remember that code is a living thing and you are meant to constantly be analyzing all your code and thinking if there is some way you could achieve the same result better. If so then take some time to refactor that code.



FAQ: What are some common refactoring techniques?
The most straightforward one is simply renaming symbols to use a better name. This applies to variables, functions, classes, etc.
Then another important one is knowing how to split functions/classes. Remember how ideally they should only do one thing, so if a function is doing 5 different things it would likely be better to split it into 5 separate functions, same thing for classes.
Same logic also applies to super huge classes/functions. Maybe it's ok, there's no hard limit on the size but if something is way too big that is a sign that there might be a better way to do things by splitting the logic into various components.



FAQ: How does refactoring affect the performance of my code?
It doesn't, at least not inherently.
Refactoring isn't usually about performance, it's about code readability. The goal is to help you manage your code complexity so you can keep working and building upon your codebase.
So that is the primary goal of refactoring although refactoring for performance is also a valid option. But before you do, use the profiler to make sure you do actually have performance issues in that specific part of code.
For example there's no point in refactoring and optimizing some part of your code that only runs once. Instead focus on logic that runs every frame (after you've identified the performance issues)



FAQ: How often should I refactor my code? Is there such a thing as too much refactoring?
Always and no. You should always be analyzing your code and if you ever come up with a better way of doing things then you should take the time to refactor your code.
Obviously don't get stuck over-optimizing some piece of code, your code should be high quality but does not need to be perfect, use common sense but in general yes you should always be thinking about potential ways to improve your codebase.



------------



####### Lecture Enums

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an enum, and why are they used instead of integers or strings?
Enums have named values which makes the code much easier to read.
If you have some code that returns 0 there's no way of knowing what that means by looking at it.
Whereas if the code returns ErrorCode.FileNotFound then it's immediately clear what it means.



FAQ: How do you define and use enums?
You just type the keyword enum then define some name and inside a code block you define all the values.



FAQ: How do you convert an enum to its underlying integer value?
You can just cast it
##REF##code,
int enumInt = (int)MyEnum.MyValue;
##REF##
This can be useful for saving and loading or doing some math.



FAQ: How do you parse a string onto an enum?
You use either of these:
##REF##code,
System.Enum.Parse();
System.Enum.TryParse();
##REF##
They take in a string and return an enum, if the string matches an enum value.



FAQ: How do you iterate over all values of an enum?
##REF##code,
System.Enum.GetValues(typeof(MyEnum));
##REF##
This will return a collection of all the values in an enum, then you can do a foreach to cycle through all of them.
##REF##code,
foreach ()
##REF##


FAQ: Are there any common pitfalls with Enums?
The biggest one is related the Unity. The way Unity serializes data with enums is by storing the int value which by default is based on the order that you define the enum values.
So if you have some Weapon script with a WeaponType enum
##REF##code,
enum WeaponType {
    Sword,
    Shield,
}
-------
// In weapon
[SerializeField] private WeaponType weaponType;
And in the editor you assign it to WeaponType.Sword
If you then modify the enum value order:
enum WeaponType {
    Shield,
    Sword,
}
##REF##
Then you look in the editor and the Weapon will have WeaponType.Shield assigned to it.
That's because Unity doesn't store the string name of the value, it stores the int. And by modifying the structure of the enum you modify the underlying int value.
Be aware of this when modifying enums after you have assigned some values. Usually you want to avoid modifying the order if possible, just add new values at the end.



------------



####### Lecture Properties

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a property in C#, and how does it differ from a field?
Properties are kind of a mix between a field and get and set functions.
Properties themselves don't really store any data, even auto-implemented properties, they always have a backing field to store the data itself.



FAQ: What is an auto-implemented property? How is it different from a non-auto-implemented property?
Auto-implemented properties are properties where the compiler itself will build the structure for the underlying field and use it in the property logic.
##REF##code,
public string PlayerName { get; set; }
##REF##
Whereas in non-auto-implemented properties you define the backing field yourself and handle it manually.
##REF##code,
private string playerName;
public string PlayerName { 
    get {
        return playerName;
    }; set {
        playerName = value;
    }; 
}
##REF##


FAQ: How can you add logic to a property's getter or setter?
You write a code block and inside it write whatever code you want.
For the setter you have a special keyword named 'value' which contains whatever value was assigned to the property.
##REF##code,
private string playerName;
public string PlayerName { 
    get {
        // Do anything here...
        return playerName;
    }; set {
        // Do anything here...
        playerName = value;
    }; 
}
##REF##


FAQ: Do you have to implement both a get and a set?
No, you can implement just one of them.
For example you can implement a read-only property by only defining the get; and not writing any set;



FAQ: What does it mean to have different access modifiers for the getter and setter, and how is it useful?
It means how for example you can make the get; public so any class can get that property, but leave the set; as private so only that class can set it.
This is especially useful in implementing the singleton pattern where you need the class that creates the singleton to assign it, but any class should be able to get it.
##REF##code,
public static Player Instance { get; private set; }
##REF##


FAQ: Why might someone prefer not to use properties?
Personally I am not a fan of properties simply because they look like fields but act like functions.
So I prefer to keep those separate, if I want to store data I use a field, if I want to do some logic I use a function.
But that's just personal preference, if you like properties go ahead and use them.



FAQ: How are properties used in the singleton pattern?
Properties make it really easy to define a public get; and a private set; which is the perfect accessiblity for the singleton pattern.
##REF##code,
public static Player Instance { get; private set; }
##REF##


FAQ: Can properties be used in interfaces?
Yup!
Once again since properties don't actually store any data themselves they can indeed be defined in an interface.
Then whatever class implements that interface can implement the property with its backing field.



------------



####### Lecture MultiDimensionalArrays

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a multidimensional array, and how is it different from a regular (one-dimensional) array?
A one dimensional array, like int[] has only one dimension, whereas a multidimensional array, like int[,] has multiple dimensions.
Think of a int[] as a line, a int[,] as a square, and a int[,,] as a cube.



FAQ: How do you declare and initialize a 2D array in C#?
You define the type and then the number of dimensions within the square brackets, so for a 2 dimensional array with size 2,3 you do:
##REF##code,
int[,] int2DArray = new int[2, 3];
##REF##


FAQ: How do you access and modify elements in a 2D array?
You access it just like you would a normal array, but pass in 2 indexes
##REF##code,
int2DArray[0, 2] = 3; // Set value on index 0, 2 to 3
##REF##


FAQ: What are the differences between a 2D array and an array of arrays?
To define a 2D array you define it with int[,] and an array of arrays with int[][]
To create a 2D array you do
##REF##code,
int[,] int2DArray = new int[2, 3];
##REF##
For create an array of arrays you need to create the main array, then cycle through it and create each individual array
##REF##code,
int[][] intArrayArrays = new int[2][];
for (int i=0; i<intArrayArrays.Length; i++) {
    intArrayArrays[i] = new int[3];
}
##REF##
Because of this it also means that if you just create a 2D array it will create it with all positions set to 0
But an array of arrays will have all it's positions set to null
##REF##code,
int[,] int2DArray = new int[2, 3]; // All set to 0
int[][] intArrayArrays = new int[2][]; // All set to null
##REF##


FAQ: How do you access and modify elements in an array of arrays?
You pass in the first index in the first square brackets then another square brackets with the second index.
##REF##code,
int2DArray[0][2] = 3; // Set value on 0, 2 to 3
##REF##


FAQ: How do you determine the length of each dimension in a multidimensional array of arrays?
The first one is just the array.Length
If it is a rectangular array (meaning not-jagged) then just access on an index, like 0, and get the length.
If it's a jagged array then each sub array will have a different length.
##REF##code,
int firstDimensionSize = intArrayArrays.Length;
int secondDimensionSize = intArrayArrays[0].Length;
##REF##


FAQ: How do you iterate over all elements of a 2D array?
##REF##code,
int[,] int2DArray = new int[2,3];
for (int i = 0; i<int2DArray.GetLength(0); i++) {
    for (int j = 0; j<int2DArray.GetLength(1); j++) {
        Console.WriteLine(int2DArray[i, j]);
    }
}
##REF##


FAQ: What are jagged arrays?
They are arrays of arrays int[][] where the inner arrays have different lengths.
For example index 0 would have an int[10] but then index 1 would have an int[5] and so on.
As opposed to multidimensional arrays [,] or arrays of arrays where the size is fixed for all elements of each dimension.



FAQ: What is a practical example of how 2D arrays are useful?
A good practical example is my Grid system
The grid is represented with a 2D array containing all the elements.
Then that Grid System is also using Generics, which are covered later on in the course, which makes it super versatile.
I've used the same underlying Grid System in tons of interesting systems.



------------



####### Lecture NestedLoops

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a nested loop?
A Nested loop is simply a loop within another loop. Just like you can also have nested classes within another class.
You can nest loops of any type, although usually you have a for loop within another for loop.



FAQ: Can you nest different loop types?
Yup you can! You can place a while within a foreach or a do-while inside a for, everything works.



FAQ: Show me an example of how nested loops work with multidimensional arrays?
To cycle through all elements of a 2D array you do:
##REF##code,
int[,] int2DArray = new int[2, 3];
for (int i=0; i<int2DArray.GetLength(0); i++) {
    for (int j=0; j<int2DArray.GetLength(1); j++) {
        // Do something with int2DArray[i, j];
    }
}
##REF##


FAQ: How does the scope of the variables work with nested loops?
Variables are only accessible from child nested code blocks, not parent code blocks.
If you define a variable in an outer loop, you can access it in a nested loop.
If you define a variable in a nested loop, you cannot access it in the outer loop.
Basically the same rules apply to any kind of code block. Just like a function local variable can be accessed by a nested if, but a variable defined in a nested if cannot be accessed outside it.



FAQ: How do the break and continue keywords work within nested loops?
They only affect the innermost loop where they are called. They do NOT affect all loops.
If you place a break; in a nested loop it will stop running the nested loop but continue running the outer loop as normal.



FAQ: Does break; stop executing of every nested loop?
No, only the innermost loop, it does not affect the outer loops. Same thing for continue;



FAQ: What are some possible problems with nested loops?
They can make your code really hard to understand if you go too deep.
Usually 2 nested loops is fine, especially for doing standard things like cycling through a 2D array. But if you should avoid going deeper than that if you can avoid it.
If you can't avoid it, then perhaps place some looping logic in a function and call that function within another loop, it might help make the code more readable.



------------



####### Lecture Recursion

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is recursion, and how does it work in C#?
Recursion is another way of doing looping logic without using loops. And how it works is simply the act of a function that calls itself.
##REF##code,
private void TestRecursiveFunction() {
    TestRecursiveFunction();
}
##REF##
This is a super simple example of recursion, and also an example of an infinite loop which you can accidentally create with recursion just like you can with regular loops.
So normally the recursive function will have some kind of parameter that eventually breaks the cycle.



FAQ: How do you prevent recursion infinite loops?
By adding some parameter and some condition that eventually stops the recursive loop.
##REF##code,
private void RunRecursionXTimes(int x) {
    if (x <= 0) {
        return;
    } else {
        RunRecursionXTimes(x - 1);
    }
}
---------
RunRecursionXTimes(3); // This will run the recursive code 3 times
##REF##


FAQ: What is stack overflow, and why does it occur in the context of recursion?
When you call a function, the CPU stores the function memory address in the function call stack. If you call a function too many times, like infinite recursion, then at some point that call stack runs out of memory and overflows.
Since regular loops don't call functions they don't have that problem, they simply run forever.



FAQ: How does recursion compare to using loops for iteration?
With recursion you can do everything you can do with loops. Both are great tools that solve the same problems, it's up to you to pick the method you most prefer.



FAQ: Can I avoid recursion if I find it too confusing?
Yup!
Personally I find recursion confusing so I never use it myself. Everything you can do with recursion you can do with loops, and vice versa.



FAQ: Can I use recursion instead of loops if I prefer it?
Absolutely!
For some people, espeically those with a math background, they might find recursion more intuitive than using loops. If that's you then yup feel free to only use recursion.
Anything you can do with a loop you can do with recursion so use the tool that you prefer.



------------



####### Lecture Dictionary

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a Dictionary in C#?
A Dictionary is a data structure that can store Key-Value pairs, meaning for each given Key you have a Value assigned to that Key.
And the C# Dictionary works with generics which means you can use any type for the Key and any type for the Value.
Generics are covered in detail in a future lecture.



FAQ: How do you declare and initialize a Dictionary?
You just need to define the types you want to use for the key and the value, for example you can use an enum for a Key and an int for the Value
##REF##code,
Dictionary<ResourceType, int> inventoryDictionary; // ResourceType is an enum with various resource types
inventoryDictionary = new Dictionary<ResourceType, int>(); // Create dictionary
inventoryDictionary[ResourceType.Wood] = 5; // Assign the value 5 to the key ResourceType.Wood
##REF##


FAQ: How do you add items to a Dictionary?
You can call the Add function, or just access it by the index
##REF##code,
inventoryDictionary.Add(ResourceType.Wood, 5);
inventoryDictionary[ResourceType.Wood] = 5;
##REF##


FAQ: What is the TryGetValue and how does it work?
Like the name implies it tries to get a value if such a key exists.
If it does it will return true and place the value in the out parameter.
If it does not exist the function returns false.



FAQ: How do you iterate over the keys, values, or key-value pairs in a Dictionary?
You can do a foreach to cycle through the dictionary.Keys or dictionary.Values or just through the dictionary itself:
##REF##code,
foreach (KeyValuePair<ResourceType, int> keyValuePair in inventoryDictionary) {
    Console.WriteLine(keyValuePair.Key + ", " + keyValuePair.Value);
}
##REF##


FAQ: What is the trick to using a Dictionary and expose it to the Unity Editor?
By default Dictionaries are not serializable so they do not show up in the Unity Editor Inspector.
A good trick is to make a type to hold you key-value pair, then expose a list of that type, and when that script starts populate the dictionary with the contents from that list.
##REF##code,
[System.Serializable] // It needs this attribute for custom classes to show up in the Inspector
public class ResourceTypeAmount {
	public ResourceType resourceType;
	public int amount;
}
[SerializeField] private List<ResourceTypeAmount> resourceTypeAmountList;
--------
private Dictionary<ResourceType, int> inventoryDictionary;

private void Awake(){
	inventoryDictionary = new Dictionary<ResourceType, int>();
	foreach (ResourceTypeAmount resourceTypeAmount in resourceTypeAmountList) {
		inventoryDictionary[resourceTypeAmount.resourceType] = resourceTypeAmount.amount;
	}
}
##REF##


------------



####### Lecture OtherCollections

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a Stack and a Queue in C#?
These are two collections.
The Stack is a FILO collection, First In Last Out. Like a Stack of papers where the last paper you add on top is the first one you grab.
The Queue is a FIFO collection, First In First Out. Like a Queue of people, where the first person that enters the queue is the first one out.



FAQ: How do you add and remove items from a Stack?
To add elements to a Stack you do stack.Push(); to grab them you do stack.Pop();



FAQ: How do you add and remove items from a Queue?
To add elements to a Queue you do queue.Enqueue(); to grab them you do queue.Dequeue();



FAQ: Can a List do the same thing as Stack and Queue?
Yup!
With some extra logic you can add the same FIFO or FILO behaviour to a list. Just grab the element on index 0 or list.Count - 1;
Personally I rarely use Queue or Stack, simply because I find Lists pretty straightforward and easy to work with to do whatever I want to do.



FAQ: What is a HashSet in C#?
This is a collection that stores a unique list of values. The difference from a list is on the uniqueness.
If you add the numbers 1, 2, 1, 3 to a list you store all those numbers.
If you add them to a HashSet only 1, 2, 3 will be stored. (uniques)



FAQ: What is a SortedList in C#?
It's just like a List but elements are sorted automatically as they add added or removed from the list.



------------



####### Lecture FunctionParams

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the params keyword in C#, and how does it work?
This is a special keyword that you can apply to a parameter in a function which makes that function able to receive any number of parameters.
##REF##code,
void AddNumbers(params int[] intArray);
---------------
// All of these are valid function calls
AddNumbers(1);
AddNumbers(1, 5);
AddNumbers(1, 5, 2);
##REF##


FAQ: What is an example of params being used?
An example is a function that returns the sum of any amount of numbers
##REF##code,
void AddNumbers(params int[] intArray);
##REF##
Another example could be a function that can take damage from multiple sources
##REF##code,
void TakeDamage(params DamageSource[] damageSourceArray);
##REF##
Or maybe a function to log multiple messages
##REF##code,
void Log(params string[] messageArray);
##REF##
Any of these functons can be called with any number of parameters.



FAQ: What are the requirements for using the params keyword in a function?
The requirement is that it must come at the very end after all the other mandatory and optional parameters, and there can only be one params parameter.



FAQ: Is the array passed to a params parameter ever null, or is it always instantiated even if no arguments are passed?
It is never null, if you pass in no arguments it will simply be an empty array.



------------



####### Lecture OptionalParameters

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are optional parameters in C#?
These are parameters that you are not required to include when calling the function.


FAQ: What rules must be followed when using optional parameters in a function?
They must come after the mandatory parameters and must have a default value defined.


FAQ: What is the default keyword?
It returns the default of that data type.
For example the default of an int is 0
The default of a bool is false
The default of some class is null



FAQ: How do you call a function with only some optional parameters?
You pass in the parameter name then a colon : and then the value
##REF##code,
TestFunction(myOptionalParameter: false);
##REF##


FAQ: Can you call a function with optional parameters out of order?
Yes! If you pass in the name of the parameter you can call it in any order
##REF##code,
// Both of these are valid
TestFunction(myOptionalParameter: false, mySecondParameter: 12);
TestFunction(mySecondParameter: 12, myOptionalParameter: false);
##REF##


FAQ: What are the advantages of using optional parameters over method overloading?
The main advantage is code compactness since you can just define the function once instead of many times for each parameter combination.



------------



####### Lecture ValueVsReferenceTypes

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are the main differences between value types and reference types in C#?
The main difference is how value types store the data directly whereas reference types store a pointer to the location in memory that actually contains the data.
So when working with value types, if you call a function with a value type parameter that function will receive a copy of that data.
Whereas with a reference type, the function will receive the same pointer that points to the same data in memory, not a copy.



FAQ: What are some examples of value types and reference types?
The built-in types, like int, bool, float, are value types. If you pass them into a function they are passed in as a copy, if you modify that copy inside the function it does not affect the original data.
Classes are reference types, so if you pass in a Player class object to a function you are passing in a reference to the original object. Changes made to that player object inside the function modify the actual object outside the function.



FAQ: How does assignment work differently for value types and reference types?
When assigning a value type you assign a copy.
When assigning a reference type you assign the same reference that points to the same data.



FAQ: What happens when you pass value types and reference types to a function?
Value types are passed in as a copy, if you modify that value inside the function you only modify the local copy, not the original data.
Reference types are passed in as a reference, if you modify that object inside the function it modifies the actual original data.



FAQ: Can value types be null?
No, value types always have to have a value, so you cannot do int i = null;
However there is a special type called Nullables which can make any type able to support null, so this is valid code:
##REF##code,
int? i = null;
##REF##
I cover Nullables in detail in a lecture in the Advanced section.



FAQ: What is a struct, and how does it differ from a class in terms of being a value type or reference type?
Structs are similar to classes in that they can store data in fields and have functions, however they are value types.
So when you use them remember whether you're working with the original data or a copy.
Whereas classes are reference types so they work as references and not copies.



FAQ: Is an array of int a value type?
No. int is a value type but arrays are objects and objects are reference types so when you make an array of any type you are creating an object.



------------



####### Lecture Struct

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a struct in C#, and how does it differ from a class?
A struct is a structure of data, and just like classes it can store data in fields, it can have functions, implement interfaces and so on.
The main difference is how structs are value types whereas classes are reference types.
Also they cannot inherit from a base class or base struct.



FAQ: What is the implication behind the fact that structs are value types and classes are reference types?
It means they work as a copy rather than as a reference.
If you pass in a class to a function and you modify inside that function it will modify the original data.
Whereas if you pass in a struct to a function and you modify it inside that function it will only modify the local copy.



FAQ: Can structs have functions, fields, and properties like classes?
Yes!


FAQ: Do structs have to be immutable?
No, you can modify their data.
However to avoid confusing yourself I recommend you treat structs as immutable data as much as possible.



FAQ: What rules to struct constructors have?
They must assign every single field in the struct, they need to correctly initialize every part of the structs data structure.
They also cannot have parameterless constructors.



FAQ: Can a struct implement interfaces? Can it inherit from another struct or class?
Yup it can implement any interfaces you want.
Nope it cannot inherit from another class or structs.



FAQ: How does the memory efficiency of structs compare to classes? Which is more performant?
Structs are more performant in memory due to how they are stored in the stack instead of the heap.
The exception is if the struct is huge or if it contains objects inside it.



------------



####### Lecture ClassIntermediate

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is inheritance in C#?
Inheritance is how you can have one class inherit from another class.
Meaning it will inherit the base class's functions, fields, events, etc.
Then they can optionally be overriden to have a different implementation.
And inheritance also includes polymorphism, meaning an object can be treated as either of being of the base type or the final type.



FAQ: How does function overriding work? What is the purpose of the virtual and override keywords?
You can override some implementation of some function, as long as you are inheriting from a base class and the base function is marked as virtual and the overriden one is marked as override.
This allows you to run different logic depending on the type of the object you're working with.
For example you could have a base Unit class that has a Move(); function that uses AI to move the unit, and then a Player class that inherits from Unit but overrides the Move(); function to use player input for movement.



FAQ: What is polymorphism?
This is how an object can act as a different type, as long as those types are related.
##REF##code,
public class Unit { }
public class Player { }
-------------
Unit unit = new Unit();
Unit unitPlayer = new Player(); // This is valid because Player inherits from Unit so it can be used as a Unit
Player player = new Unit(); // This is NOT valid because Unit does not have a direct relationship with Player
##REF##

Then if you have a function that takes in an object of type Unit, you can pass in a Player object
##REF##code,
public void DoSomething(Unit unit);
-----------
DoSomething(new Player());
##REF##


FAQ: What are abstract classes and functions?
Abstract means the abstract function has no base implementation, and it forces classes that extend that type to implement those abstract functions.
Also abstract classes cannot be created directly, only classes that extend that type can be created.



FAQ: What does the sealed keyword do to a class?
It prohibits other classes from inheriting from that class.



FAQ: How do structs differ from classes in terms of inheritance?
Structs cannot inherit from other structs or classes. But they can implement interfaces.


FAQ: How does inheritance compare with interfaces?
One big difference is how a class can only inherit from just one base class, but can implement as many interfaces as you want.
Also interfaces are just a contract, so they cannot store any data themselves, they cannot have any fields.


FAQ: How do class destructors work in C#?
Classes can have Constructors and a Destructor.
Writing a destructor is similar to a constructor, you write the syntax by using the same name as the class and include any parameters you want. However unlike a constructor, before the name you write a tilde ~
##REF##code,
~Player() {
    // Player destructor
}
##REF##
This code will run when a Player object is destroyed by the garbage collector.


FAQ: What does it mean to prefer composition over inheritance?
It means rather than having very complex inheritance trees where something like a Dog inherits from Animal which inherits from LivingThing, etc.
Instead of that you compose an object with various behaviours, possibly by implementing interfaces or just having different components.
Like perhaps a Dog class would have a Legs component that defines how it walks, then a Heart component that defines how it lives, a Mouth component that defines how it talks/eats, etc.
For example Unity is entirely based on a composition pattern. What defines the behaviours of some game object in Unity is based on the components attached to that game object. If it has a SpriteRenderer component it will render a sprite, if it has a MeshRenderer component it will render a mesh, if it has a Rigidbody it will have physics, etc.



------------



####### Lecture Interfaces

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an interface in C#?
An interface is like a contract, where you define an interface with a bunch of elements (functions, properties, events) and then any class that implements that interface MUST implement all the elements defined in the interface.
What this means in practical terms is how you can write code that works with that specific interface, and it will automatically work with any classes that implement that interface.
So you can have an IDamageable interface to handle objects that can take damage, and then you can implement that interface on a Player class, an Enemy class, a Barrel class, and all the damage logic that works with that interface will work on any of those types.



FAQ: What can you define inside an interface?
You can define functions, properties and events. You cannot define fields, this is because interfaces aren't an actual thing you can construct, so by themselves intefaces cannot store any data.
Also interface elements must be public, you cannot define a private function inside an interface.



FAQ: How do you implement an interface in a class?
You just write a color : after the class name and then the name of the interface, for example:
##REF##code,
public class Player : IDamageable { }
##REF##
Then you must implement all the elements defined in the interface.



FAQ: How are interfaces different from inheritance?
Interfaces cannot hold any data, unlike a base class, so they are different there.
Then a class can only extend one base class but can implement any number of interfaces.



FAQ: Does polymorphism also apply to interfaces?
Yes!
If you have an interface, IDamageable, and you implement it on a Player class. Then you can have a function that takes in a field of type IDamageable and you can pass in a Player object into that function.



FAQ: What are some practical use cases for using interfaces?
One common one is some damage system, you can define a IDamageable interface that has some TakeDamage(); function. Then you can make some bullets that work with IDamageable objects and call TakeDamage(); on collision.
With that set up you can then have those bullets deal damage to anything that implements that interface. It could be a Player or an Enemy or a Barrel or anything.


Another common example is an interaction system. You can define an IInteractable interface with an Interact(); function and then you can make an interaction system that works with that interface, and by implementing that interface in various types you can enable the player to open doors, push buttons, talk to NPCs, etc.



------------



####### Lecture IsAsCasting

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does the is keyword do in C#?
It checks if the object is of a certain type
##REF##code,
if (unit is Player) {
    // unit is of Player type
}
##REF##


FAQ: How does the GetType() function do? What is typeof?
The GetType() function returns the Type of that object.
For example if you do myInt.GetType() you get System.Int32
If you have a player class and do player.GetType() you get Player
The typeof keyword is similar, but rather than being applied to an object of a certain type you use it on the type itself
##REF##code,
myInt.GetType(); // System.Int32
typeof(int); // System.Int32
##REF##
The Type type is extremely useful when working with reflection which lets you inspect all kinds of things of a particular type, like what functions it contains. There is a lecture on Reflection in the Advanced section.



FAQ: What is the difference between using as and casting for type conversion?
Casting will throw an exception if a cast is not possible.
as will return null if the conversion is not possible.

And 'as' does not work when applied to non nullable types (value types)
##REF##code,
int a = obj as int; // Invalid
##REF##


FAQ: What happens when a type conversion fails using as compared to casting?
It returns null, whereas a cast that fails will throw an exception.


FAQ: What is boxing and unboxing in C#?
This is how you can take any object of any type, like an int or Player, and place it inside the C# object type
##REF##code,
object obj = (object)myInt; // Valid
##REF##
Doing so makes the obj a reference type which holds a pointer that points to the myInt value.
Unboxing is the opposite, converting an object into some other type.
##REF##code,
int myInt = (int)obj;
##REF##
Since object is the base type for any type in C# this can sometimes be useful when you don't know exactly what object type you're working with. Although it should only ever be used with care.
There is a lecture on boxing in the Advanced section.



FAQ: How does inheritance affect the ability to convert between types? What about interfaces? Polymorphism?
You can convert freely between any inheritance type or interface.
If you have a Player class that extends Unit and implement IDamageable, this is all valid code.
##REF##code,
Player player = new Player();
if (player is Unit) {
    Unit playerUnit = player as Unit; // Although the 'as' isn't needed here, due to polymorphism
}
if (player is IDamageable) {
    IDamageable playerDamageable = player as IDamageable; // Although the 'as' isn't needed here, due to polymorphism
}
##REF##


------------



####### Lecture SwitchPatternMatching

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is switch type matching and how does it differ from traditional switch statements?
On a traditional switch you do a switch on the value of the variable.
With switch type matching you do a switch on the type itself, rather than whatever value it stores.



FAQ: What is the syntax for switch type matching?
On the switch itself it's the same, just include the value inside the switch.
Then on the case, instead of doing case VALUE you do case TYPE
##REF##code,
switch (unit) {
case Player player:
    // It's a Player
    break;
case Enemy enemy:
    // It's an Enemy
    break;
}
##REF##


FAQ: What is the purpose of the when clause in switch pattern matching, and how do you use it?
It allows you to apply conditions to further limit which switches are valid
##REF##code,
switch (unit) {
case Player player when player.health > 100:
    // It's a Player AND the player has over 100 health
    break;
}
##REF##


FAQ: How does switch type matching improve code readability compared to traditional type checking methods?
The same way that the regular switch improves when doing tons of ifs comparing various values.
Instead of tons of ifs testing if an object is of various types, you just do a switch on type.
##REF##code,
switch (unit) {
case Player player:
    // It's a Player
    break;
case Enemy enemy:
    // It's an Enemy
    break;
}
-------------------
if (unit is Player) {
    Player player = unit as Player;
}
if (unit is Enemy) {
    Enemy enemy = unit as Enemy;
}
##REF##


------------



####### Lecture Delegates

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a delegate in C#?
A delegate is how you can reference a function in a type. So you can have a delegate that has a signature where it returns void and takes in no parameters, and then have some field of that type, and then some function "void MyFunction()" assigned to that field.
Then you can "run" that field which in turn will run the function that it is referencing.



FAQ: How do you declare and use a custom delegate?
You write the keyword 'delegate' and then the return type, then the name of the delegate and then whatever parameters it has.
##REF##code,
// Define delegate
delegate void TakeDamageDelegate(int damageAmount);

// Define a variable of the delegate type
TakeDamageDelegate takeDamageAction;

// Assign a function or lambda to the delegate
takeDamageAction = (int damageAmount) => {
    // take damage logic...
};

// Use the delegate variable
takeDamageAction(56);
##REF##


FAQ: Do you have to define custom delegates?
C# has two built-in super useful delegates, Action and Func. They have various versions that work with generics which allows you to use them in pretty much any scenario.
However custom delegates also have their place, they have one huge benefit which is how you can define a proper name for them.
Sometimes it might make the code more readable to have
##REF##code,
TakeDamageDelegate takeDamage;
##REF##
Instead of:
##REF##code,
Action<int> takeDamage;
##REF##


FAQ: What are the built-in delegate types Action and Func?
Action returns void and takes in any number of parameters.
Func returns something and takes in any number of parameters.



FAQ: Can you provide an example of using a lambda anonymous functions with a delegate?
Sure, the lambda syntax is simply the parameters inside parenthesis (int damageAmount) then a little arrow => and then a code block { }
Here's some examples:
##REF##code,
Action shootBulletAction = () => {
    // Shoot bullet logic
};
Action<int> takeDamageAction = (int damageAmount) => {
    // Take damage logic
};
Func<bool> isGroundedFunc = () => {
    // Is grounded logic
    return true;
};
##REF##


FAQ: What does it mean that delegates can multicast?
It means you can define a field of being of a delegate type, and then you can assign a single function to it with = or you can add multiple functions to that delegate with += (and remove with -=)
Then when invoking the delegate it will run ALL the functions that delegate is referenecing.
##REF##code,
Action shootBullet;
shootBullet += () => {
    // Shoot fire bullet
};
shootBullet += () => {
    // Shoot ice bullet
};
shootBullet(); // This will fire both a fire AND an ice bullet
##REF##


FAQ: What are some common use cases for delegates?
Common usecases are for any kind of asynchronous programming, so anything where it will take some time to get a result but you don't want to block the execution of the program, like contacting a webserver.
Usually you will contact the webserver and use a delegate for the callback that will be triggered whenever the server responds, without blocking the main program while waiting.
Or for something like Pathfinding where usually the algorithm is made to work in a multithreaded manner and won't immediately execute. You can add a callback that will run later on when the path is calculated.



------------



####### Lecture LocalFunctions

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are local functions in C#, and how do they differ from regular functions?
Local functions are defined within another function, unlike regular functions which are defined in a class.
They are only usable within the same function where they are declared.
So it's similar to the difference between local variables and class variables.



FAQ: How do local functions compare to lambdas in terms of syntax and usage?
A lambda has a syntax like this:
##REF##code,
(int a) => {
    // Do something
};
##REF##
Note how it has no name by itself.
Whereas a local function has a syntax like this:
##REF##code,
void DoSomething(int a) {
    // Do something
}
##REF##
If you want to run a lambda you need to store it in some delegate, whereas you run a local function as if it were any other function.



FAQ: Are there performance differences between using local functions and lambdas?
Local functions are more performant mainly due to the fact that normally they are only defined once, in the background the compiler creates a normal function base on the local function, whereas Lambdas are actual objects that are created whenever that function runs.
However if you capture local variables then local functions will behave like lambdas.



FAQ: Can local functions be passed as delegates or used as event handlers, similar to lambdas?
Yup!


------------



####### Lecture Events

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an event in C#, and how does it work?
Events are how you can have one class notify some other class that something has happened.
You define an event in some class, then any other class can subscribe or listen to that event, and when that event is fired all the other classes will be notified.
One common example in game development is for handling logic and UI. If your Player has some health system, you usually have some sort of OnDamaged event that the HealthBarUI will listen to which will update itself whenever the event is fired.



FAQ: How do you declare and fire an event in a C# class?
You declare an event with the 'event' keyword, then a delegate type and finally a name
##REF##code,
public event Action OnDamaged;
##REF##
To fire the event you can just do
##REF##code,
OnDamaged();
##REF##
However this will throw a NullReferenceException if there are no listeners, so you need to test if the event is not null
##REF##code,
OnDamaged?.Invoke();
##REF##


FAQ: Can you show an example of subscribing to and unsubscribing from an event?
If a player class has some Action OnDamaged event, you can write code on some HealthBarUI class to listen to that event:
##REF##code,
player.OnDamaged += Player_OnDamaged;

private void Player_OnDamaged() {
    // Player was damaged
}
##REF##
To unsubscribe you just do the reverse
##REF##code,
player.OnDamaged -= Player_OnDamaged;
##REF##


FAQ: What happens if you don't unsubscribe from an event?
Then that class will continue receiving events whenever they are fired, which can cause errors if the listener object dies but the event publisher keeps firing events.
In Unity you can make sure to always unsubscribe to events with the OnDestroy MonoBehaviour function.



FAQ: What are the differences between using delegates and events? Why use the event keyword?
The event keyword applies several limitations that help protect you from yourself.
Without the 'event' keywrod then any class can subscribe += unsubscribe -= and also invoke the event() or even set it to = null clearning all the listeners.
Whereas if you add the keyword, the only class that can invoke or set it to null is the class that defines the event, other classes can only subscribe or unsubscribe.



FAQ: What is the EventHandler delegate?
This is the standard delegate for handling events, it can be customized with custom EventArgs classes to pass in any data you want.
You are not required to use it, you can make an event using any delegate type like Action or a custom delegate, but the C# standard makes sense and is pretty easy to use.



FAQ: How do you pass data with an event using EventArgs or custom event data classes?
You make a class that extends EventArgs with whatever custom data you want. Then you define the event using the generic EventHandler<TCustomEventArgs>
##REF##code,
public class OnDamagedEventArgs : EventArgs {
    public int damageAmount;	
}
public event EventHandler<OnDamagedEventArgs> OnDamaged;

OnDamaged?.Invoke(this, new OnDamagedEventArgs {
    damageAmount = damageAmount,
});
##REF##


FAQ: How does event-driven programming help UI and game logic separation?
It helps your game be more decoupled. The logic class, like Player, does not know or need to know whether a HealthBarUI exists. Whether it exists or not the code will still compile.
Whereas if the Player directly tells the HealthBarUI what health it has, if you remove the HealthBarUI the code breaks.
Remember that in general the more you can minimize access and complexity the better it is, so if you can use a pattern that reduces or removes coupling then you should use that.



FAQ: What are the best practices for managing event subscriptions to avoid memory leaks?
You can simply remember to always unsubscribe from events, in Unity you can use the OnDestroy function or in C# you can use the ~Class destructor.
Although if both event publisher and listener have the same lifetime then technically you don't need to unsubscribe, since both objects will be destroyed at the same time therefore there will be no dangling listeners.



FAQ: What is the null-conditional operator? Why is it used with events?
It is the shorthand for testing against null, and if not null continue executing some code.
In events it is especially helpful since you always need to test against null, using the null-conditional operator makes the code very compact and easy to read.
##REF##code,
if (OnDamaged != null) {
    OnDamaged();
}
------------------
OnDamaged?.Invoke();
##REF##


------------



####### Lecture Generics

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are generics in C#, and why are they used?
Generics allow your types to work with all kinds of types.
One example is List<T> which you can use to make a List that holds ints, another one that holds strings, another one that holds Player objects and so on.
Without generics you would need to define a separate List class for every type you wanted to use it with.
Classes can use Generics, so can Interfaces and even individual functions.



FAQ: How do you define a generic class or method in C#?
You write the class name and then angled brackets with the generic type name.
##REF##code,
public class GridSystem<T> { }
##REF##


FAQ: Is the class List<T> using a generic?
Yes! That's why you can make a list of any type, it's thanks to the fact that the List class was defined to work with generics.
If List was not defined using generics then you would need to make a ListInt, ListString, ListPlayer, etc, leading to a mountain of duplicated code.



FAQ: What are type constraints in generics, and how do you apply them?
This is how you can limit what types can be used in the generic. You can limit it to only work with classes, only work with types that have a constructor, or only work with types that implement some sort of interface.
By adding these constraints you can then make some assumptions on your objects of type T
For example if you make a class with a T generic type that has the constraint where it must implement an IDamageable interface, then you can write code inside that class and you can call any IDamageable functions in the T type because you have a guarantee that class will always be used with types that do implement that interface.



FAQ: What are some real world use cases for generics?
One example that I've used a lot myself is making a Grid System. I built one a long time ago and made it work with generics, because of that I was then able to reuse that same base class in multiple systems: Pathfinding, Factory Game, Grid Building System, House Building System, Turn Based Strategy, etc.
Those all require some grid structure and different data on each grid position, so all of those use the same base class but with custom GridObject types.
I only wrote the base class once and reused it in tons of completely different systems using different types.



FAQ: Can you use multiple generic types?
Yup!
Inside the angled brackets you can define as many generic types as you want.
You can view the built-in Action type which has multiple variations using various amounts of parameters.
##REF##code,
Action<T1>
Action<T1, T2>
Action<T1, T2, T3>
##REF##


------------



####### Lecture ConstantsReadonly

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are constants in C#?
These are variables that can never change. Their value is assigned at compile time and remains constant forever.


FAQ: What is the difference between a constant (const) and a readonly field in C#?
A constant can only store certain types, built-in type where the value can be defined at compile time.
##REF##code,
const int AGE = 35;
##REF##
However you cannot make a constant of some type that cannot be defined at compile time, like some kind of object
##REF##code,
const Player DEFAULT_PLAYER = new Player(); // Error!
##REF##
So the main difference between constants and readonly is with readonly you can indeed use those types because readonly can works with types that are defined at runtime.
Like constants, a readonly field cannot be modified after it is set, their value needs to be assigned either on the variable declaration or the class constructor.



FAQ: Why can only certain data types be declared as const in C#?
Because the value needs to be defined at compile time, it cannot be a type that only exists at runtime time, like an object.


FAQ: When should I use const/readonly?
When there is some sort of value that never changes.
For example if you have a game where your player speed is meant to be constant, there are no upgrades and the value should never change, then make it a constant.
That way if you accidentally modify it you will get a compiler error.
And if you have some value that is meant to be constant but has a type that cannot be used with const, if so then use readonly.



FAQ: Can readonly fields be modified after object construction?
No! Like the name implies they can only be read. The only 2 places where they can be set is in the variable declaration or the constructor. After that they can only be read.


FAQ: Where can I assign a value to a readonly field?
On the field definition itself, or on that class constructor.


FAQ: Can const or readonly be used with static fields?
const cannot be static since constants are static by default, constants always belong to the class itself and not any instance of that class, like static.
However readonly fields can indeed be either static or non-static. If you want a readonly field to behave similarly to a constant, make it static.



------------



####### Lecture TryCatchExceptions

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an exception in C#?
An exception is an error.
If you try dividing a number by 0 or try to access a field on a null object, you get an exception.



FAQ: How do try, catch, and finally blocks work in C#?
When an exception happens the code will stop running automatically.
However you can wrap some code inside a try block, and if an exception happens it will only stop executing the rest of that try block and continue afterwards.
If you also define one or multiple catch blocks you can run code depending on the exception type that happened.
And if you write a finally block, that code will always run, even if you call return; inside the try or catch. Usually finally is used for clean up.



FAQ: Can you handle multiple specific types of exceptions with multiple catch blocks?
Yup!
You can define multiple catch blocks each capturing a different exception.
Just make sure you go top down from most specific to least specific, since all exceptions extend System.Exception you can put that type at the very end after the more specific exceptions.



FAQ: What is the main purpose of the finally block?
Usually the main purpose is to do any sort of clean up.
Like for example if in the try block you open some file for reading or writing, you want to make sure to close that file regardless of whether an exception happens or not, otherwise you end up with memory/access leaks.



FAQ: How do you throw an exception?
You simply write
##REF##code,
throw new Exception();
##REF##
The exception type can be either a built-in type, like ArgumentOutOfRangeException, or a custom exception type you define that extends System.Exception
Also while inside a catch block, you can just type throw; which will rethrow that same exception upwards on the function call stack.



FAQ: How do you define a custom exception?
You just define a class, name it something that usually ends with -Exception, and make it extend System.Exception
##REF##code,
public class MyCustomException : Exception {
    // Add any custom exception data here
}
##REF##


FAQ: What does it mean to rethrow exceptions? And how is it done?
It means that you caught the exception in a catch block but do not know how the exception should be handled. If so you can rethrow the exact same exception by just writing:
throw;
Doing this will throw the exact same exception upwards on the function call stack.



------------



####### Lecture IEnumerable

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the main purpose of implementing IEnumerable?
The main purpose is to enable foreach to work with your custom types.
Also to make it work with all sorts of LINQ queries. This is how you can do lots of operations on collections or custom types that implement IEnumerable.
There is a lecture on LINQ in the Advanced section.



FAQ: What is the difference between IEnumerable and IEnumerator?
IEnumerable requires you to implement a function that returns an IEnumerator.
And IEnumerator contains the logic for managing enumeration, it keeps track of the current element and the logic for how to move to the next element.



FAQ: Can you show an example of implementing IEnumerable and IEnumerator for a custom collection?
##REF##code,
public class PlayerStats : IEnumerable<Stat> {
    public Stat dex = new Stat { name = "Dexterity", value = 12 };
    public Stat str = new Stat { name = "Strength", value = 25 };
    public Stat wis = new Stat { name = "Wisdom", value = 56 };

    public IEnumerator<Stat> GetEnumerator() {
        return new PlayerStatsEnumerator(this);
    }

    IEnumerator IEnumerable.GetEnumerator() {
        return GetEnumerator();
    }

    public class PlayerStatsEnumerator : IEnumerator<Stat> {

        private PlayerStats playerStats;
        private int index;

        public PlayerStatsEnumerator(PlayerStats playerStats) {
            this.playerStats = playerStats;
            index = -1;
        }

        public Stat Current {
            get {
                switch (index) {
                    default:
                    case 0: return playerStats.dex;
                    case 1: return playerStats.str;
                    case 2: return playerStats.wis;
                }
            }
        }

        object IEnumerator.Current => Current;

        public void Dispose() {
        }

        public bool MoveNext() {
            index++;
            if (index > 2) {
                Reset();
            }
            return index != -1;
        }

        public void Reset() {
            index = -1;
        }
    }

}

public class Stat {
    public string name;
    public int value;

    public override string ToString() {
        return name + ": " + value;
    }
}
##REF##


FAQ: How does the yield return statement work?
It returns a value and pauses the execution of that function at that point, then when the function is called again it will resume executing from the last place where it stopped.
You can implement just IEnumerable without defining a IEnumerator if you just use yield return on the IEnumerable function.



FAQ: In Unity, how do coroutines work with IEnumerator?
Coroutines in Unity are how you can run some logic over multiple frames or do some timing logic.
You write a function that returns IEnumerator which inside it has whatever logic you want, including some built-in Unity functions like yield return WaitForSeconds(x); which will wait x number of seconds before resuming execution.
And then you can start executing the coroutine by writing StartCoroutine(MyFunction()); in a MonoBehaviour.



------------



####### Lecture Namespaces

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a Namespace in C#?
Namespaces are kind of like folders that allow you to organize your code in a better way as opposed to having thousands of classes all in the same place.
There are various built-in namespaces that have all kinds of classes inside it.
System has lots of general system-wide classes, like Console
System.IO has various classes about input-output like File
System.Collection.Generic contains various generic collections like List<T>
UnityEngine.UI contains lots of classes related to Unity UI



FAQ: How do you decide when to create a new namespace?
There's no hard rule but it's whenever you feel like your code could be better organized into namespaces.
There's no cost to creating a namespace, no inherent cost to having too many or too few, so it really is whatever you prefer.



FAQ: What is a namespace alias?
This is how you can create an alias, or second name, for some kind of namespace. This can be really helpful if you have super long namespaces.
##REF##code,
using MyGame = CodeMonkey.Really.Long.Namespace.Game;
##REF##
Then in the code if I want to use classes from that namespace I can access them through MyGame.MyClass instead of the super long name.
It also helps avoid naming conflicts where you add using statements for multiple namespaces that have classes with the same name.



FAQ: Do you have to define a namespace for all your code?
No, defining a namespace is optional. If you don't define one then the compiler defines a default root namespace where your classes will exist.



------------



####### Lecture SingletonPattern

#### FREQUENTLY ASKED QUESTIONS
FAQ: When is it appropriate to use a Singleton pattern?
Whenever you have some type where only one single instance is meant to exist.
Like for example usually in game you have a single GameManager class, perhaps just one AudioManager class, perhaps in a singleplayer game just one Player class, etc.
The singleton pattern makes that single instance really easy to access which can be very helpful.



FAQ: How do you implement a singleton in C#?
You define a property, usually named Instance, and inside that property you make a public get and private set, this way only that class can set but any other class can get.
Then on the get you implement lazy initialization which means you check the backing field for that property and see if the singleton already exits, if so you return that one, if not you create a new one.
##REF##code,
private static Player instance;
public static Player Instance { 
    get {
        if (instance == null) {
            instance = new Player();
        }
        return instance;
    }
    private set {
        instance = value;
    }
}
##REF##


FAQ: How do you implement a singleton in Unity?
In Unity you have to do things a little bit differently because you cannot use the constructor on classes that extend MonoBehaviour.
So in Unity you still define the usual property with a public get and private set, but for the lazy initialization usually you set the instance on the scripts Awake();
Then optionally add some safety logic to prevent more than one singleton.
##REF##code,
public static Player Instance { get; private set; }

private void Awake() {
    if (Instance != null) {
        Debug.LogError("One instance already exists");
        return;
    }
    Instance = this;
}
##REF##


FAQ: What are the core accesiblity rules for a singleton?
The class that defines the singleton should be the only one that can set the singleton field. All other classes should only be able to get the singleton field.
Usually this means the singleton instance property should have a public get; and a private set;



FAQ: Can I avoid using the singleton pattern?
Sure! 
The singleton pattern can be very useful but as with anything with programming it's just a tool that you can either use or not use.
If you want to avoid using singletons you just need to pass the reference somehow.
For example if your player wants to add some score to some ScoreManager, you can either use ScoreManager.Instance.AddScore(); or pass in a reference to the ScoreManager to the Player through some function/field and use that direct reference instead of the singleton.



FAQ: How can singletons be abused?
They can increase code coupling if you have tons of singletons being used by tons of different classes.
They can also make testing harder, since you need to at least create mocks of those singleton objects in order to test some code.
And they can make multi-threaded code much more difficult due to issues with accessing and modifying a single object from multiple parts of code.
All of those potential issues can be avoided/minimized by writing better clean code, just because you can access every singleton from everywhere does not mean you should.
The singleton is merely a tool, and as with any tool it can be used or abused. So don't be afraid of singletons but also don't abuse them.



------------



####### Lecture DesignPatterns

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the main goal of design patterns?
Design patterns are essentially battle tested solutions for common programming problems that were created by very smart people.
Chances are many of the programming problems you're trying to solve have already been solved in the past and someone defined a design pattern speciically for that problem, it's simpler to just know and apply the pattern as opposed to trying to come up with something brand new, there's no need to reinvent the wheel yourself.



FAQ: What is the BEST design pattern?
There is no best, it all depends on the situation. Most design patterns solve different problems, so the best is the one that helps solve whatever problem you're tackling.



FAQ: Do I have to memorize all these design patterns?
No, there are hundreds of design patterns, some of which you might use all the time (like me and the Singleton and Observer patterns) and others you might never ever have to use.
So it's good to do some research to be aware of all the design patterns that exist and the types of problems they help solve, but don't necessarily try to memorize them all in one go. As you write more and more code you will become more familiar with the common ones that you use all the time.



FAQ: Can I deviate from the pattern slightly?
Absolutely! Patterns are like clean code rules, they're more guidelines to help you rather than laws that must never be broken.
So always keep in mind what problem you're trying to solve, and implement the pattern as much as it helps you.



FAQ: Should I refactor my code to implement some pattern?
Like I mentioned on the lecture on refactoring, yup you should always be thinking about how your code could be better, and if you do find some way that it could be improved, maybe by implementing some pattern, then absolutely take some time to refactor your code.



------------



####### Lecture IntermediateProject

#### FREQUENTLY ASKED QUESTIONS
FAQ: Should I take some time to inspect and modify the project?
YES!
As I've said many times, you learn by doing, so take some time to modify some things in this project. Inspect the code in your own time to see how it all works, how it all connects, how all the classes relate to one another.
Then change something, change the player speed to see what it does, try making another weapon or enemy type.
A complete working project like this one is great for taking it apart to see how it all works.



FAQ: How do I design a project like this?
In terms of project management/design there is no single universal correct way to do it, everyone has their own process.
Some people like making super detailed Game Design Documents, others like making complex UML diagrams, some people just like a rough sketch. All of those options are valid.
Personally I tend to just do a bit of a high level overview on paper. I write down the core elements I want to implement and how they might interact with one another, nothing super detailed, just a very high level overview. And then I quickly make a simple tiny prototype. 
That's my personal process but like I said everyone works differently, so experiment with various project planning methods and find out what works for you.



FAQ: How long does a project like this take to build?
It really depends on your own skillset. For someone who is a complete beginner to any kind of programming, I expect them to take several months until they reach this lecture.
Maybe a bit faster if you already know some programming and just need to learn the specifics for how Unity works.
And in my case, where I already have all the knowledge covered in this course and I'm already very experienced with Unity and Game Dev in general, for me it took me maybe 6-8 hours to build this demo.
Experience is a very important thing, this is not the first (or 10th) top down shooter game I've made, it's not the first time I've written a HealthSystem or used Interfaces to handle combat. Once you have the knowledge and have a clear design in your head of what you are trying to build, then everything gets done pretty quickly.



FAQ: Could some parts of this project be made differently?
Yup!
The structure for this project is just one of many many possible ways to do it. You could have a dedicated class to handle the Money, you could have a separate class to handle the shooting, you could have avoided using inheritance for the weapons, you could have used direct references instead of the GameAssets singleton, you could have used Scriptable Objects for the item types instead of an enum, etc.
Whenever you picture a game in your head, keep in mind there are many many ways to reach that goal, and as long as you reach that goal then all those methods are valid.



FAQ: Could you define the Items with Scriptable Objects?
Yup you could, this is what I would normally do but in this course I'm trying to avoid using Unity specific things, like Scriptable Objects, and I wanted to use Enums.
If you don't know what are Scriptable Objects watch this video:
##REF##video_small, 7jxS8HIny3Q, Make your Games Designer Friendly! (Scriptable Objects)###REF##



FAQ: What is [SerializeField]?
This is an attribute that is used, specifically in Unity, to make a private field show up in the editor. Without it the private field does not appear in the inspector.
What beginners tend to do is make the field public which will make it show up in the editor, but like I covered in the lecture on Clean Code Guidelines, this is a terrible practice because it enables read/write access to that field from any class in your entire codebase. So the workaround is to make it private and add the [SerializeField] attribute.
I made an entire video on why you should not make everything public, and in there I talk about this workaround.
##REF##video_small, pD27YuJG3L8, Why you should NOT make everything PUBLIC!###REF##


FAQ: How could I add another weapon?
You would make another class that extends Weapon, give it a new enum value ItemType, a new sprite and define the UseItem(); logic for that weapon.
Then make another weapon Object script that implements IGrabObject and returns an instance of the logic class. Build a visual prefab and attach the object script onto it.
And yup that's it! 
Then you should be able to pick up the weapon, select it in the inventory and upon using it it should run the custom logic that you defined.



FAQ: Can parts of this game be reused in a different game?
Yup!
This project is a great example of many clean code principles in action, the main one being simply decoupling your classes as much as possible.
For example the Inventory class, it is not tightly coupled with the specific Player or Money or Weapons in this specific game. You can take that inventory class along with the interface and use the exact same class on a completely different project with completely different items. Same thing for the UI element, it also has no coupling with any class specific to this game so it could be reused in a completely different project.
Then the HealthSystem, this is another class that is completely separated from anything else, you could use this same class in a game that doesn't even have any units. Same thing for the HealthBarUI.
Then the GameAssets, this class with the singleton setup is something that I use in every single one of my games. It's a super simple way to reference assets from anywhere in the code.
Then some parts of this minigame actually uses my own Code Monkey Utilities package which I've been using in my own games for a decade. I wrote a function to get a random direction 10 years ago and haven't looked at it since despite using it in tons of projects.
And in terms of general logic design, you could reuse the combat logic, the Raycast logic + the IAttackable interface + HealthSystem. I've handled combat in many games and demos in this exact same way.
All these examples hopefully help you see the value in writing good clean code. If you write it correctly you save yourself tons of time by building elements you can reuse across multiple games.



------------



####### Lecture AdvancedIntro

#### FREQUENTLY ASKED QUESTIONS
------------



####### Lecture Reflection

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is reflection in C#?
Reflection is a feature in C# that allows you to dynamically inspect and interact with your types at runtime.
You can use it to create instances of types, call functions, access fields, and much more. Reflection is the way all the Interactive Exercises work.


FAQ: Why would you use reflection?
Reflection is useful when you need to work with types and members dynamically, like when you don't know the specific classes and functions you will need to interact with at compile time.
One practical example is the Interactive Exercises on this project. Some exercises require you to define some class which means the code needs to dynamically look for that class instead of being hardcoded which would throw a compile error because when the exercise starts the class is not defined.
It's also used in scenarios like plugin systems, where code needs to be loaded and executed dynamically.


FAQ: How do you create an instance of a class using reflection?
You can create an instance of a class dynamically using the Activator.CreateInstance function. 
Here’s a simple example:
##REF##code,
Type myType = typeof(MyClass);
MyClass myInstance = (MyClass)Activator.CreateInstance(myType);
##REF##
Remember to cast the type because CreateInstance() will return a generic 'object'


FAQ: Can you modify private fields using reflection?
Yes, you can access and modify private fields using reflection by specifying binding flags such as <b>BindingFlags.NonPublic</b>
##REF##code,
Type myType = typeof(MyClass);

FieldInfo fieldInfo = myType.GetField("myPrivateField", BindingFlags.NonPublic | BindingFlags.Instance);

fieldInfo.SetValue(myObject, "new value");
##REF##
This can be useful for building things like testing frameworks where you want to ensure you also test your private fields and functions.


FAQ: What is the GetMethod() function used for in reflection?
The GetMethod() function is used to get a MethodInfo object representing a specific method/function on a type.
Then you can do all kinds of things with that MethodInfo like get the number and type or parameters, or return type, or dynamically call the function.
##REF##code,
MethodInfo methodInfo = myType.GetMethod("MyFunction");
methodInfo.Invoke(myInstance, null);
// This would be the equivalent of this
myInstance.MyFunction();
##REF##

There is also GetMethods(); in plural, which returns an array of functions.


FAQ: Is reflection efficient?
Reflection is slower than directly calling functions or accessing fields because it requires inspecting metadata and performing operations dynamically.
In most cases you should use normal code, you should only use Reflection when it's the only way to achieve what you're trying to do.


------------



####### Lecture FunctionExtensions

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an extension method or function extension?
An extension method is a special kind of static function defined in a static class that allows you to add new functions to existing types without modifying those types.


FAQ: How do you create a function extension?
To create a function extension, you need to define a static function in a static class (which is usually named ___Extensions) and use the 'this' keyword in the first parameter to specify which type the function extends.
##REF##code,
public static class TransformExtensions {
    public static void MoveRight(this Transform transform) {
        return transform.position += Vector3.right;
    }
}
--------------
transform.MoveRight();
##REF##


FAQ: Why use function extensions?
Function extensions allow you to add functionality to existing classes without modifying them.
This is especially useful for adding functions to classes that you don't have access, like Unity's built-in classes: Transform, Rigidbody, GameObject, etc.


FAQ: How do you call a function extension?
You call an it like any other method of an object.
##REF##code,
int myNumber = 10;
bool result = myNumber.IsGreaterThanFive();
##REF##
Just make sure to also add a using statement if your extension class is on a different namespace.


------------



####### Lecture StaticConstructor

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a static constructor in C#?
A static constructor is a special constructor used to initialize static members of a class.
It runs only once, just before any static members are accessed (fields, functions, properties, etc) or just before any instances of the class are created.


FAQ: How do you declare a static constructor?
A static constructor is declared by using the static keyword and cannot have access modifiers or parameters.
##REF##code,
static MyClass() {
    // Initialization code here
}
##REF##


FAQ: Can a static constructor have parameters?
No, static constructors cannot have parameters, they must be parameterless.


FAQ: Can you call a static constructor directly?
No, you cannot call it directly, it is called automatically by the .NET Framework to initialize the class before the first instance is created or any static members are used.


FAQ: What are the uses of static constructors?
Static constructors are used to initialize static data, or to perform a particular action that needs to happen only once. Exactly like you also have a normal non-static constructor that you use to initialize that object.


FAQ: How does the static constructor behave in multithreaded code?
In multithreaded code, the .NET runtime ensures that the static constructor is thread-safe, meaning that even if you have multiple threads using it at the same time it will only ever run once.


------------



####### Lecture typeof

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does the typeof operator do in C#?
The typeof operator in C# is used to obtain the System.Type object for a given type.
It allows you to work with the metadata of that type like inspecting the fields and functions that type has which can be used for reflection.
Or some functions also receive a parameter of type System.Type, like GetComponent() (the non-generic version) and you would use those like:
##REF##code,
GetComponent(typeof(Player));
##REF##


FAQ: How do you use the typeof operator?
You use the typeof operator pretty much like a function, just write typeof and then within parenthesis the type.
##REF##code,
System.Type intType = typeof(int);
##REF##


FAQ: Can you use typeof with custom classes?
Yup! You can use typeof with any type, including custom classes.
For example, if you have a class named Player, you can use typeof(Player) to get the Type object for the Player class.


FAQ: What is the difference between typeof and GetType()?
Both return a System.Type object.
typeof requires you to write the type itself within parenthesis, whereas GetType() is a function which requires an instance of that type.
##REF##code,
System.Type playerType1 = typeof(Player);
System.Type playerType2 = playerInstance.GetType();
##REF##


FAQ: What are some common uses of the typeof operator?
The main one is whenever some function has a paramter of type System.Type.
The other use case is for working with Reflection.


------------



####### Lecture nameof

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does the nameof operator do in C#?
The nameof operator gets the string name of a variable, type, or member at compile time.
This helps in avoiding hardcoding strings in your code which is something you should avoid at all costs. By not using hardcoded strings it also makes the code more robust and ensure it won't break if you rename the class.


FAQ: How do you use the nameof operator?
You use it as if it were a function, type nameof and then the symbol you want to convert into a string. It works with anything like class names, fields, functions, etc.
##REF##code,
nameof(Player); // "Player" returns the Player class name
nameof(playerField); // "playerField" returns the playerField string name
nameof(HandleMovement); // "HandleMovement" returns the HandleMovement function name
##REF##


FAQ: Can nameof be used with methods and properties too?
Yup! nameof can be used with variables, function, properties, classes, and more.
For example if you have a AttackEnemy() function you can use nameof(AttackEnemy) to get "AttackEnemy"


FAQ: Does nameof work with parameters of methods?
It works exactly the same, if a function has a 'player' parameter then you can do nameof(player) to get "player".
This can be very useful for debugging and logging more clear messages when some parameter isn't exactly as it should be.


FAQ: What happens if you refactor a name that is used with nameof?
If you refactor a name used in a nameof expression, the nameof expression automatically updates to reflect the new name. This ensures that the code remains correct and consistent without needing to manually update hardcoded strings.


FAQ: Is there a performance benefit to using nameof?
When compared to reflection, yes, there is a small performance benefit.
Since nameof is evaluated at compile time and replaced with the actual name as a string literal in the compiled code, it avoids any runtime performance costs.


------------



####### Lecture sizeof

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does the sizeof operator do in C#?
The sizeof operator is used to determine the size, in bytes, of value types like int, float, bool, etc. It tells you how much memory a particular data type uses.
For example each 'int' is stored in 4 bytes, so if you want to store 10 int's you need 40 bytes of memory.


FAQ: Why can't I use sizeof on classes?
The sizeof operator cannot be used on reference types like classes because the memory allocation for reference types is more complex and managed differently by the .NET runtime.


FAQ: What is Marshal.SizeOf() used for?
Marshal.SizeOf() is a function used to get the size of a type or an instance of a type in bytes, including reference types, albeit with some limitations.
The entire Marshal class is all about handling data and converting it back and forth between managed and unmanaged.


FAQ: Can I use sizeof in safe context? Or does it need unsafe?
Yes, sizeof can be used in safe context for built-in value types.
However, if you need to use sizeof on custom structs or get the size of pointer types, you must operate in an unsafe context. There is a lecture later on in the Advanced section on the topic of 'unsafe' in C#.


FAQ: How does knowing the size of a type help in programming?
Knowing the size of a type helps in memory management, especially in scenarios like developing for memory-constrained environments (like old Mobile phones or Embedded devices), optimizing network communications (you want as little bandwidth cost as possible), or when performing low-level memory operations.


------------



####### Lecture default

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does the default operator do in C#?
The default operator is used to get the default value for a given type.
For value types like int or bool, it provides the zero-equivalent value (0 for integers, false for boolean), for reference types, it returns null.


FAQ: Can the default operator be used with custom classes?
Yes, the default operator can be used with custom classes. For any reference type, including custom classes, the default value is null.


FAQ: How is default used with Generics?
When working with Generics, default(T) is used to obtain the default value for a generic type T.
This allows generic methods and classes to return a default value without knowing what specific type T will be at compile time.


FAQ: Is there a difference between default(T) and default?
default(T) explicitly requires specifying the type T whose default value is needed. default without specifying the type can be used in contexts where the type can be inferred by the compiler, such as in variable assignments or return statements in generic methods.


FAQ: Can default be used to initialize optional parameters in functions?
Yes, default can be used to initialize optional parameters to their default values. This can be done either by explicitly defining the type, like default(int), or by using just 'default' where the type is inferred by the context.


FAQ: Why use default instead of specifying a literal value like 0 or null?
Using default makes your code more maintainable and less error-prone. It automatically adapts if the type of the variable changes. For example, if you change a variable from int to float, default will still provide the correct zero-equivalent value without needing to change your code.
However when you don't want a zero-equivalent value it's perfectly fine to use any value you define yourself, like -1 on an int to represent some invalid value.


FAQ: How does the default operator handle structs?
For structs, default provides a new instance of the struct with all its fields initialized to their default values.
This means numeric fields will be 0, booleans will be false, and reference type fields will be null.


------------



####### Lecture ExpressionBodiedMembers

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are expression-bodied members?
Expression-bodied members allow you to write the body of certain members (like functions or properties) using a concise lambda expression syntax.
This makes the code very compact and possibly more readable, but only when the member implementation is simple, like simple Get/Set functions/properties.


FAQ: What is the syntax of an expression-bodied function?
Here is a normal function:
##REF##code,
public string GetPlayerName() {
    return playerName;
}
##REF##
And here is the compact expression-bodied version:
##REF##code,
public string GetPlayerName() => playerName;
##REF##

Both methods do exactly the same thing but the second one is more compact without sacrificing readability.


FAQ: How can expression-bodied members be used with properties?
Expression-bodied members can be used to define getter and setter properties in a compact form.
##REF##code,
public string PlayerName {
    get => playerName;
    set => playerName = value;
}
##REF##

This syntax provides a short and clear way to implement property accessors.


FAQ: What limitations do expression-bodied members have?
Expression-bodied members must consist of a single expression and cannot contain multiple statements or a block of code.
This means they are typically used for very simple operations, like returning a value or assigning a value, but not for more complex logic.
This limitation is a very good thing because it means you can only use them where it makes sense, you can't abuse them in scenarios where it would result in worse readability.


FAQ: When should you use expression-bodied members?
You should use expression-bodied members when you have a very simple member, such as a property getter or setter, or a function that simply returns a value or performs a single operation. It helps keep the code clean and readable, especially when the operation is straightforward.


FAQ: Can expression-bodied members be used for constructors?
Expression-bodied members can be used for constructors, but only if the constructor performs a single operation.
However most constructors include multiple statements, which doesn't work with the expression-bodied syntax.


FAQ: Does the expression-bodied syntax improve performance?
No, it's just syntactic sugar to help you write more compact and readable code.
The compiled output of expression-bodied members is equivalent to their traditional counterparts in terms of performance.


------------



####### Lecture Records

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a record in C#?
A C# Record is a type that makes it easy to create types to group some data.
It's more compact than defining an explicit class/struct with all the fields.
However it is only meant for simple data use-cases, if you need to do some logic on your data you should define a regular class instead.


FAQ: How do you define a record?
You define a record with the <b>record</b> keyword, then a name for the type and then parameters for the types you want to define in the record.
##REF##code,
public record Person(string FirstName, string LastName);
##REF##
This will define a 'Person' type which inside it contains 'FirstName' and 'LastName' properties. They are immutable, meaning they can only be set during initialization and not modified afterwards.


FAQ: How do you instantiate a record?
You instantiate a record just like how you instantiate any other object.
##REF##code,
Person person = new Person("Code", "Monkey");
##REF##
Then you can access person.FirstName and person.LastName
However remember how by default records are immutable, meaning you cannot modify those properties after creating the record, you can only read their data.


FAQ: Can you modify a record after it's created?
By default, records are immutable, meaning you cannot change their properties after instantiation.
However, you can create a new record based on an existing one using the 'with' expression, which allows you to specify new values for some properties.
##REF##code,
Person updatedPerson = person with { LastName = "Gorilla" };
##REF##
Remember how this does not modify the original 'person', it simply creates a new one and overwrites some properties.


And technically you can manually implement the properties with a get; and set; to make them mutable. However you really should not do this, records are intended to be simple immutable data containers.


FAQ: How do you make a mutable record?
You can make the properties of a record mutable by explicitly declaring them with getters and setters:
##REF##code,
public record MutablePerson {
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public MutablePerson(string FirstName, string LastName) {
        this.FirstName = FirstName;
        this.LastName = LastName;
    }
}
##REF##
However, this goes against the primary purpose of records, which is to provide simple immutable data structures.



FAQ: Are records reference types or value types?
Defining a record using just the 'record' keyword is equivalent to 'record class' which makes it a reference type. As opposed to 'record struct' which makes it a value type.
However if you define a 'record class' it will be a reference type but behave like a value type in terms of equality. Two record instances are considered equal if all their properties are equal, not based on their reference.
##REF##code,
Person person1 = new Person("Code", "Monkey");
Person person2 = new Person("Code", "Monkey");
Console.WriteLine(person1 == person2); // true
// If person was a normal class it would be false
##REF##


FAQ: Can records inherit from other records?
Yes, records can inherit from other records. This allows you to create a hierarchy of records, where derived records inherit properties from their base records, just like normal class inheritance:
##REF##code,
public record Vehicle(int Wheels);
public record Car(int Doors, int Wheels) : Vehicle(Wheels);
##REF##


FAQ: Can you use C# records in Unity?
You can, although it requires a workaround, you need to explicitly define the class 'IsExternalInit' inside the namespace 'System.Runtime.CompilerServices'
##REF##code,
namespace System.Runtime.CompilerServices {
    public class IsExternalInit {
    }
}
##REF##


------------



####### Lecture NullConditionalOperators

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the purpose of null conditional operators?
Null conditional operators allow you to safely access members (like fields, functions, properties) of an object without having to explicitly check if the object is null. If the object is null, the statement returns null instead of throwing a NullReferenceException.
##REF##code,
player?.TakeDamage();
##REF##
If 'player' is null then nothing happens, no error.
If 'player' is not null, then it will call TakeDamage(); on that player object.


FAQ: How do you use the null conditional operator for calling a function?
You can use the null conditional operator (?.) to call functions like this:
##REF##code,
myObject?.MyFunction();
##REF##
This code will execute MyFunction() only if myObject is not null. If myObject is null, it does nothing and the entire expression evaluates to null.


FAQ: Can the null conditional operator be used with arrays or lists?
Yes, you can use the null conditional operator with indexers to access elements in arrays or lists safely.
##REF##code,
Target firstTarget = targetList?[0];
##REF##
This code will safely attempt to access the first element of targetList.
If targetList is null, result will be null, preventing a NullReferenceException.
However it will not prevent an IndexOutOfRangeException!


FAQ: What happens if you use the null conditional operator on a type that cannot be null?
You can't, you get a compiler error.
The null conditional operator can only be used on types that can be null, such as reference types or nullable value types.
Using it on a non-nullable value type (like int) throws a compiler error, unless the type is made nullable (like int?).


FAQ: How does the null conditional operator handle multiple operations in a single statement?
You can chain multiple operations with the null conditional operator.
For example:
##REF##code,
player?.target?.TakeDamage();
##REF##
This statement will check 'player' for nullity, then if 'player' is not null, it checks 'target' for nullity, and if 'target' is also not null, it calls TakeDamage().
If any part is null, the statement short-circuits and returns null safely without throwing any errors.


FAQ: What's the most common use case for the Null conditional operator?
The most common use case is simply for invoking events in a compact manner.
With events you have to first check if the event it not null which will be the case if there are no listeners.
So you can either use a normal if to do a null check, or just simply use the null conditional operator to do the same thing in a more compact manner.
Both of these do the exact same thing:
##REF##code,
if (OnDamaged != null) {
    OnDamaged(this, EventArgs.Empty);
}
----------------------
OnDamaged?.Invoke(this, EventArgs.Empty);
##REF##


------------



####### Lecture NullCoalescingOperators

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are the null-coalescing operators in C#?
The null-coalescing operator (??) and null-coalescing assignment operator (??=) provides a way to simplify checks for null values.
The first one returns the left side if it is not null; otherwise, it returns the right side.
The second one checks if the left side is null, if so it assigns it to what is on the right side.


FAQ: How can you use the null-coalescing operator to provide default values?
You can use the null-coalescing operator to specify a default value for nullable types or reference types.
##REF##code,
string name = null;
string displayName = name ?? "Default Name";
##REF##
This sets displayName to "Default Name" if name is null. If name is not null then displayName becomes 'name'


FAQ: Can the null-coalescing operator be chained?
Yes, the null-coalescing operator can be chained to handle multiple nullable expressions.
##REF##code,
string primary = null;
string secondary = null;
string fallback = "Default";
string result = primary ?? secondary ?? fallback;
##REF##
This will assign result the value of primary, secondary, or fallback, depending on which is the first non-null value.


FAQ: What is the null-coalescing assignment operator and how is it used?
The null-coalescing assignment operator (??=) assigns a value to a variable only if that variable is currently null.
##REF##code,
List<Player> playerList = null;
playerList ??= new List<Player>();
##REF##
This will initialize 'playerList' with a new List<Player> only if 'playerList' is currently null.
So it is great for handling initialization.


FAQ: Can the null-coalescing operator be used with non-nullable value types?
No, the null-coalescing operator can only be used with nullable types.
To use it with value types, like int, you must make them nullable, for example int? instead of int.
There is a lecture on Nullables later on in the course.


------------



####### Lecture TernaryConditionalOperator

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the ternary conditional operator in C#?
The ternary conditional operator is a shorthand way of writing a simple if-else statement in C#.
It allows you to assign values based on a condition in a single line.
The syntax is:
##REF##code,
condition ? valueIfTrue : valueIfFalse
##REF##


FAQ: How can you use the ternary conditional operator to assign a value based on a condition?
You can use the ternary operator to assign a value to a variable depending on the result of a condition.
##REF##code,
string state = health > 0 ? "ALIVE" : "DEAD";
##REF##
If health is above 0 then state will be "ALIVE", if not it will be "DEAD".


FAQ: Can the ternary conditional operator be nested?
Yes, the ternary operator can be nested to handle multiple conditions.
##REF##code,
int score = 85;
string grade = score >= 90 ? "A" : score >= 80 ? "B" : "C";
##REF##
This checks two conditions in a nested manner to determine the grade.
However always remember to value readability above all else. Never write compact code at the expense of readability.


FAQ: Is it good practice to use the ternary conditional operator for complex conditions?
Technically you can use it for more complex scenarios, however it can reduce code readability when overused.
It is best used for simple conditions.


FAQ: Can you perform actions with the ternary conditional operator, or is it only for value assignment?
The primary use of the ternary operator is for value assignment.
However technically you can use functions or methods that return a value. But again while this is technically possible it will likely lead to readability issues, so only use the ternary conditional operator for simple conditions.


------------



####### Lecture MainCommandLineArgs

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the purpose of the Main function in a C# program?
The Main function serves as the entry point of a C# program. It's where the program starts executing.
The Main function has some specific rules. First it must be named exactly "Main", not "Start" or "main" or anything else, then it must be static and it must exist in a class or struct.


FAQ: Can the Main function return a value?
Yes, the Main function can return an int or void (or Task, Task<int>)
Returning an int is commonly used to indicate the exit status of the program, where 0 normally means success and non-zero values mean errors or specific exit reasons.


FAQ: How do you pass command line arguments to a C# program?
Command line arguments can be passed to a C# program by including them in the Main function's parameters as an array of strings (string[] args).
Each element of the array represents a command line argument.
To run a program with command line arguments you simply run the executable and write the arguments after the name separated by spaces.
MyProgram.exe 56 "Code Monkey" false


FAQ: What happens if you try to access command line arguments in Main without passing any?
If no command line arguments are passed then the args array in the Main function will be empty but not null, so you don't need to test for that.
Your program can check args.Length to determine if any arguments were passed.


FAQ: How can you parse command line arguments in the Main function?
Since all command line arguments are passed as strings, you need to parse them into the appropriate data types using methods like int.TryParse, bool.Parse, etc., depending on the expected type of the argument.


FAQ: Can a C# program have more than one Main function?
You can have multiple classes that have a Main funciton, but only one can serve as the entry point at any given time.
You can specify which Main function to use as the entry point via the project's properties.


FAQ: How can you retrieve command line arguments if the Main function does not include the string[] args parameter?
Even if the Main function does not include the string[] args parameter, you can still access command line arguments using Environment.GetCommandLineArgs(), which returns an array of all command line arguments passed to the program.


------------



####### Lecture Nullable

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a nullable type in C#?
A nullable type allows value types, such as int or bool, to accept null as a valid value. This is useful when you need to represent the lack of a value, it makes more sense to use null than something like -1 to denote "no value".


FAQ: How do you make a value type nullable?
You can make a value type nullable by just appending a question mark (?) to the type when declaring it. For example, int? makes an integer nullable, and bool? makes a boolean nullable.
Alternatively use the Nullable<T> class.


FAQ: Can reference types be made nullable?
Reference types, such as classes, are inherently nullable because they can be set to null. The nullable modifier (?) is specifically for value types which are not nullable by default, they awlays need to have a value.


FAQ: What are the properties of a nullable type?
It has two main properties:
.HasValue: This property returns true if the nullable type contains a non-null value.
.Value: This property returns the value of the nullable type if it is not null. Importantly is how it is already of the target type, no casting required.


FAQ: How do you check if a nullable type has a value?
You can check if a nullable type has a value using the .HasValue property. If .HasValue returns true, then the nullable type contains a value. 
Alternatively, you can use the == null check.


------------



####### Lecture Span

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is Span<T> in C#?
Span<T> is a type that allows you to work with contiguous regions of memory such as slices of arrays or entire arrays, without creating additional memory allocations.
This gives you a way to access a portion of an array in a very memory-efficient manner.


FAQ: How does Span<T> improve performance?
Span<T> improves performance by reducing memory allocations and object creation.
It enables you to create slices of arrays or parts of data without copying the data into a new object, meaning it avoids garbage collection overhead and does not waste memory.


FAQ: How do you create a Span<T> from an array?
You can create a Span<T> from an array by simply assigning the array to a Span<T> variable or using the constructor to define a specific range. For example:

int[] array = { 1, 2, 3, 4, 5 };
Span<int> span = new Span<int>(array, 1, 3); 
// This creates a span with the array indexes, 1, 2, 3


FAQ: What operations can you perform with Span<T>?
With Span<T>, you can perform many of the same operations you do with an array, you can access elements, you can sort them, you can slice it further, fill it with elements and so on.
Importantly is how since Span does not create a new object, any changes made to the Span will change the original data.


FAQ: What is ReadOnlySpan<T> and how is it different from Span<T>?
ReadOnlySpan<T> is similar to Span<T> but is meant for read-only access to the underlying data.
While Span<T> allows for both reading and writing the data, ReadOnlySpan<T> only allows reading.
This can be good if all you need is to read. Also for example on something like a String you can only use ReadOnlySpan.


FAQ: How do you convert a Span<T> to a traditional array?
You can just call span.ToArray();
However naturally this will create a brand new array to hold the data.


------------



####### Lecture BitwiseOperations

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are bitwise operators?
Bitwise operators are how you can do operations on individual bits of data.


FAQ: Can you list the basic bitwise operators in C#?
The basic bitwise operators in C# are:


& (bitwise AND)
| (bitwise OR)
^ (bitwise XOR)
~ (bitwise NOT)
<< (left shift)
>> (right shift)


FAQ: What does the bitwise AND (&) operator do?
The bitwise AND operator compares two bits and if both are 1 then the output is 1, otherwise it outputs 0.


FAQ: How does the bitwise OR (|) operator work?
The bitwise OR operator compares two bits and if either one is 1 the output is 1, otherwise the output is 0.


FAQ: What is the purpose of the bitwise XOR (^) operator?
The bitwise XOR operator compares two bits and if both are 1 or both are 0 then it outputs 0, if only one of the elemnts is 1 and the other is 0 then it outputs 1. Essentially it helps you check where the bits are different.


FAQ: How do you use the bitwise NOT (~) operator?
The bitwise NOT operator simply inverts all the bits. If a bit is 1 it becomes 0, if it's 0 it becomes 1.


FAQ: What are bitwise shift operators and how do they function?
Bitwise shift operators move the bits of an operand left (<<) or right (>>).
Usually you start with the number 1 which has 0 on all bits except the rightmost one.
Example with 4 bits: 0001 == 1
Then for example you can shift to the left by 2 which ends up with binary:
1 << 2 == 0100 == 4


FAQ: What is a bitmask?
A bitmask is simply a number where each bit represents something. For example Layer Masks in Unity are Bitmasks. Each layer is represented by a bit in the mask number.
If you want to create a Layer Mask for use in a Raycast to only hit objects on layers 3 and 4 then you would use:
int layerMask = 1 << 3 | 1 << 4;


FAQ: Can bitwise operators be used with non-integer types?
No, bitwise operators can only be applied to integral types (int, long, short, byte, etc.) and enum types defined to have an integral base.


------------



####### Lecture EnumFlags

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an enum flag?
Enum flags allow you to use an enumeration type to store a combination of values instead of just one.
By marking an enum with the [Flags] attribute and giving each value a binary number, by doing that you can then store multiple enum values in a single number by using bitwise operators.


FAQ: How do you define an enum as flags?
Use the [Flags] attribute above the enum definition and assign values to the enum members that are powers of two: 1, 2, 4, 8, etc.
Or define them using bit shifts
None = 0,
Jump = 1 << 0,
Shoot = 1 << 1,
Fly = 1 << 2,


FAQ: How do you assign multiple flags to a single variable?
Yes you can combine multiple enum flags using the bitwise OR operator (|). 
For example:
Abilities playerAbilities = Abilities.Jump | Abilities.Shoot;


FAQ: How can you check if a specific flag is set in an enum variable?
You can check if a specific flag is set using the HasFlag() function or by using a bitwise AND operation (&).


bool canJump = playerAbilities.HasFlag(Abilities.Jump);


Or


bool canJump = (playerAbilities & Abilities.Jump) == Abilities.Jump;


FAQ: Do you need to use the [Flags] attribute to use bitwise operations on enums?
Technically, no. You can use bitwise operations without the [Flags] attribute. However, using [Flags] improves code readability by making it so that if you convert the enum to a string you get a list of enabled flags with their names instead of a numeric value.


FAQ: Can enum flags be used with types other than int?
Yes, you can define the underlying type of an enum to be any integral type like byte, short, int, or long, depending on how many bits you need.
This is useful for controlling the memory usage of your enums, especially in performance-critical applications.


------------



####### Lecture PreprocessorDirectives

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a preprocessor directive in C#?
Preprocessor directives are instructions that are processed by the compiler before the actual compilation of code begins.
They start with a # symbol and are not part of the C# language itself but are used to give special instructions to the compiler.


FAQ: What does the #define directive do?
The #define directive is used to define a symbol. Then you can use this symbol in an #if to test if some code should be included or not.


FAQ: How do you use conditional compilation with #if?
You can use the #if directive to include or exclude parts of the code during compilation based on whether a symbol is defined. 
For example:
#define DEBUG

#if DEBUG
    Console.WriteLine("Debug mode is on.");
#endif

This code will only execute the Console.WriteLine method if the DEBUG symbol is defined.
If we remove the define then that code is not included in the compilation at all.


FAQ: Can you undefine a symbol? How?
Yes you can undefine a symbol using the #undef directive. This removes the definition of a symbol, making it undefined for the subsequent conditional compilation checks.

#define DEBUG

#if DEBUG
	Console.WriteLine("This code compiles");
#endif

#undef DEBUG

#if DEBUG
	Console.WriteLine("This code does NOT compile");
#endif


FAQ: What is the difference between #if and a regular if statement?
The #if directive is a preprocessor directive that evaluates at compile time, meaning it includes or excludes code before the program is compiled.
Whereas a regular if statement is evaluated at runtime and is part of the executable code.


FAQ: What are #region and #endregion used for?
The #region and #endregion directives are used to specify a block of code that can be expanded or collapsed.
This can be useful for organizing and managing large code files by hiding sections of code that you are not currently using.


FAQ: What does #pragma warning disable do?
The #pragma warning disable directive is used to suppress compiler warnings. You can disable all warnings or a specific one.
This can be useful for eliminating warnings about code that you know is correct but that the compiler flags as potentially problematic.


------------



####### Lecture RefOutIn

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the purpose of the out keyword in C#?
The out keyword is mainly used to get more data out of a function than just the return type. This way you can return more than one piece of data.


FAQ: How does the ref keyword differ from out?
An out parameter MUST be set before exiting the function. Whereas a ref parameter does not need to be modified.
A ref parameter MUST be initialized before passig it into a function. Whereas an out parameter does not need to be initialized beforehand.


FAQ: Can you give an example of when to use the in keyword?
The in keyword is used to pass arguments by reference but ensures they cannot be modified by the function, they are read only.
This can be useful for passing large structs onto a function without generating a copy.


FAQ: Why might you choose to use ref instead of out?
You might choose ref over out when you want a function to modify an existing variable and the variable already has an initial value that you want to use or modify within the function.


FAQ: What happens if you forget to set an out parameter inside a function?
If an out parameter is not set inside a function then the compiler will throw an error. You have to assign it to a value before exiting the function, in any branch.


------------



####### Lecture DataBoxing

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is boxing in C#?
Boxing in C# is the process of converting a type into an object type. Since object is the base C# type all types can be converted onto it.
In doing that to value types like int, the int is placed inside a "box" which is a reference type of type object.
Then unboxing is the process of getting the data back out by casting it to the original type.


FAQ: Can unboxing cause errors?
Yes, if you attempt to unbox an object to a different type than the one it was originally boxed from, it will throw an InvalidCastException. Always ensure the type you are unboxing to matches the original boxed type.
You can use an 'is' check.


FAQ: What are the performance implications of boxing and unboxing?
Boxing and unboxing are relatively expensive in terms of performance. Boxing involves copying the value and allocating new memory on the heap, while unboxing involves type checking and casting. Frequent use of boxing and unboxing can lead to increased garbage collection and can affect the performance of your program.


FAQ: Can you store different types of values in a single collection using boxing?
Yes, if you make a List<object> you can store any type inside that list.
List<object> objectList = new List<object> {
	56,
	"Code Monkey",
	false
}


------------



####### Lecture Dynamic

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a dynamic type in C#?
The dynamic type is a data type that bypasses static type checking, meaning it does not validate your code against any known type at compile time.
So you can access any field or call any function and the code will compile. Then during runtime it will try calling that function or accessing that field, and if nothing matches inside that type then it will throw an exception.


FAQ: How does dynamic differ from var in C#?
var is compile time whereas dynamic is runtime.
When you use var the compiler infers the type based on its usage.
Whereas with dynamic the validation only happens when you try to do something with that type.


FAQ: In what scenarios is it beneficial to use dynamic in C#?
dynamic is particularly useful when interacting with things like JSON data from a webserver or when dealing with any data with an unknown structure. It can be simpler to work with than using Reflection.


FAQ: Can dynamic be used as a return type for functions?
Yes, functions can use dynamic as a return type. This allows a function to return different types of objects based on runtime conditions, making it highly flexible in terms of the data it can return. Although always remember to prioritize code readability.


------------



####### Lecture ClassIndexer

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a class indexer in C#?
A class indexer allows you to access elements from an object with an index just like with a list or array.


FAQ: How do you define an indexer in a custom class?
To define an indexer, use the 'this' keyword followed by square brackets. Inside the brackets, specify the parameter(s) used to access the elements, like an int or an enum. Then, define get and/or set accessors to control what happens when the indexer is used to get or set a value.


FAQ: Can you use types other than int for indexers?
Yes, you can use any type for the parameter of an indexer, including enums, strings, or other custom types.


FAQ: Is it possible to have multiple parameters in an indexer?
Yes, you can define multiple parameters for your indexers. This can be useful for accessing multidimensional data or when you need to index based on multiple inputs.


FAQ: How does the indexer handle out-of-range errors?
That's up to you to define. You should run your validation logic and throw either an IndexOutOfRangeException or a KeyNotFoundException.


FAQ: Can you make an indexer read-only or write-only?
Yes, if you just define a get then it will be read only. If you just define a set it will be write only. Or define both for read-write.


------------



####### Lecture Attributes

#### FREQUENTLY ASKED QUESTIONS
FAQ: What are attributes in C#?
Attributes are a way to add metadata to code elements such as classes, functions, fields, properties, and more.
You add metadata and then use reflection to decide what to do with that metadata.


FAQ: How do you create a custom attribute?
To create a custom attribute, you need to define a class that inherits from System.Attribute.
You can then add constructors to receive whatever data you want.

public class IsObjectTypeAttribute : Attribute {
    public ObjectType objectType;

    public IsObjectTypeAttribute(ObjectType objectType) {
        this.objectType = objectType;
    }
}


FAQ: How can you apply an attribute?
You can apply an attribute by just writing the attribute before the definition of what you're trying to apply it onto: function, field, class, etc.

[IsObjectType(ObjectType.Unit)]
public class Player {
    // Class definition
}


FAQ: What is the purpose of the AttributeUsage attribute?
The AttributeUsage attribute allows you to define how your custom attribute can be used. For example, you can specify whether the attribute can be applied to classes, functions, or fields.


FAQ: How do you access attributes at runtime?
You can access attributes at runtime using reflection. For example, you can use GetCustomAttributes() of a type to get an array of attributes applied to it:


var attributes = typeof(Player).GetCustomAttributes(typeof(IsObjectTypeAttribute), false);


FAQ: Can attributes contain logic?
Attributes themselves do not contain logic, they store data that you then use with Reflection to do some logic on.


------------



####### Lecture AnonymousTypes

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is an anonymous type in C#?
An anonymous type is a feature of C# that allows you to create a new object with properties without having to explicitly define a class for it first.
It's useful for creating quick, read-only, local objects within a function to store and organize some values.


FAQ: How do you create an anonymous type?
You create an anonymous type by using the new keyword followed by object initializer syntax without specifying a type name.
For example:


var myData = new { Name = "Code Monkey", Age = 36 };


FAQ: Can anonymous types have function?
No, anonymous types cannot have functions. They can only have public read-only properties.
If you need extra logic then you should probably define a normal type.


FAQ: Are the properties of an anonymous type mutable?
No, the properties of an anonymous type are immutable, they are read-only. Once a property is set during object creation, it cannot be changed.


FAQ: How can you pass anonymous types between methods?
Technically you can pass it into a function with an object parameter, but in doing so the function receives an object with no idea for what type it is, so you should not do this.


FAQ: What is the primary use case for anonymous types?
The primary use cases for anonymous types is simply for organizing and structuring some data in a temporary manner.


------------



####### Lecture Tuples

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is a tuple in C#?
A tuple is a data structure that allows you to store some data in a structure without having to first define a type.


FAQ: How do you create a tuple?
You can create a tuple using the tuple syntax which involves parentheses and commas.
For example:
var myTuple = (name: "Code Monkey", age: 36);


You can also explicitly specify the types if you want:
(string name, int age) anotherTuple = ("Code Monkey", 36);



FAQ: Can you name the elements of a tuple?
Yes, you can name the elements of a tuple during creation, which makes the code more readable:


var person = (name: "Code Monkey", age: 36);


You can then access these elements using their names:
Console.WriteLine(person.name);


FAQ: Are tuples mutable or immutable?
The ValueTuple type, which is commonly used for tuples, is mutable. This means you can change the values of the elements after the tuple is created.


FAQ: How do you return multiple values from a function using a tuple?
You can return a tuple from a function to return multiple values.
For example:

public (string, int) GetPlayerData() {
    return ("Code Monkey", 56);
}


FAQ: What is Tuple deconstruction?
This is how you can grab the data from a tuple and break it apart into local functions.


(string playerName, int healthAmount) = GetPlayerData();


Console.WriteLine(playerName + "  " + healthAmount);


FAQ: What is the difference between System.Tuple and System.ValueTuple?
System.Tuple is immutable and its elements are read-only properties, it's meant for read-only data that doesn't change after creation.
System.ValueTuple is mutable and its fields are directly modifiable.


FAQ: When should you use a tuple instead of a class or struct?
Tuples are great for grouping a small number of variables temporarily. But if you need a more permanent use then you should define a proper type.


------------



####### Lecture UsingIDisposable

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is IDisposable?
IDisposable is an interface that requires you to implement a Dispose(); function.
This is used for some kind of clean up. And when you implement this interface you allow your types to be used inside a 'using' code block.


FAQ: How does the using statement relate to IDisposable?
The using statement provides a syntax that ensures the correct use of IDisposable objects. It automatically calls the Dispose function on an object when the code block within the using statement is exited, whether it exits normally or because of an exception.


------------



####### Lecture CustomOverrideOperators

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is operator overloading in C#?
Operator overloading allows you to redefine or overload most of the built-in operators available in C#.
This lets you specify custom behavior for operations involving your own classes or structs, such as adding two objects of a custom class together using the + operator or overloading the == sign.


FAQ: How do you overload an operator in C#?
To overload an operator, you define a static function in your class using the operator keyword followed by the operator you want to overload.
This function must be marked as public and static. Here's an example for overloading the + operator:

public static ResourceAmount operator +(ResourceAmount a, ResourceAmount b) {
    return new ResourceAmount { amount = a.amount + b.amount };
}


FAQ: How do you overload the equality (==) operator?
To overload the == operator, you need to implement both the == and != operators to maintain logical consistency. Here’s how you might implement it:
public static bool operator ==(ResourceAmount a, ResourceAmount b) {
    return a.amount == b.amount && a.resourceType == b.resourceType;
}
public static bool operator !=(ResourceAmount a, ResourceAmount b) {
    return !(a == b);
}
It's also recommended to override the Equals() and GetHashCode() methods when overloading these operators.


------------



####### Lecture LINQ

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is LINQ and why is it used?
LINQ, or Language Integrated Query, is a way to query for collections of data.
You can query using functions or with a query syntax, which might look very familiar if you know SQL queries.


FAQ: What is deferred execution in LINQ?
Deferred execution means that the execution of the LINQ query is delayed until its results are actually needed.
When you define a LINQ query it doesn't actually run the logic just yet, it only defines the query. The logic only runs when you do a foreach on it or call ToList(); or ToArray();
This also means you can execute the query over several frames by using yield return WaitForEndOfFrame();
Meaning you have more control over how your resources are used.


FAQ: How can you force a LINQ query to execute immediately?
To force immediate execution of a LINQ query, you can call methods like ToList(), ToArray(), Count(), First(), or any other method that materializes the query results into concrete data structures or values.


FAQ: What are the potential downsides of using LINQ?
LINQ is usually slower than manually written loops, so if you need absolute performance you might be better off writing your own loop logic with a for or foreach.


------------



####### Lecture WinForms

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is WinForms used for in C# development?
WinForms, short for Windows Forms, is used for building graphical user interfaces (GUIs) in C# applications.
It provides a library of controls such as buttons, text boxes, labels, and many others that can be dragged onto a form to build a user interface.
The backend code is all the same, it's all C#, but instead of running it based on text input or command line arguments you can have visual buttons.


FAQ: How does WinForms differ from WPF?
WinForms is simpler and more straightforward for designing standard desktop applications. It uses a less complex rendering system and has been around longer than WPF. WPF, or Windows Presentation Foundation, provides more flexibility and features for creating more complex user interfaces including complex 3D visuals.
For simple things use WinForms (or just a Console app), for more visually complex programs, personally I like simply using Unity but you can use WPF.


FAQ: Can WinForms applications run on operating systems other than Windows?
By default, WinForms applications are targeted to run on Windows. For cross-platform GUI development in C#, you might consider using .NET MAUI, which is designed to run on multiple platforms including macOS, iOS and Android.


FAQ: How do you handle events in WinForms?
Events in WinForms are handled using event handlers. You can subscribe to events provided by controls, such as the Click event of a button, and then implement an event handler method that defines the actions to be taken when the event is fired. (when the button is clicked)


FAQ: How can I ensure that my WinForms application is responsive and does not freeze during long operations?
To keep a WinForms application responsive, perform long-running operations on a background thread rather than the UI thread. You can use background workers, tasks, or async and await to handle these operations asynchronously and update the UI thread when necessary without freezing it.



FAQ: What is the role of the Form class in WinForms?
The Form class is a fundamental part of WinForms, representing a window or a dialog box that makes up the user interface. Each form serves as a container for other controls and handles user interactions.


------------



####### Lecture DLLImportExternWinAPI

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is DllImport attribute used for in C#?
The DllImport attribute is used to import a function from an unmanaged DLL into C#, it specifies the DLL that contains the external method..


FAQ: What does the extern keyword signify in C#?
The extern keyword is used to declare a method that is implemented externall, so you don't need to implement it yourself.
If you don't use extern (or abstract, or partial) then the compiler expects an implementation or you get a compile error.


FAQ: Can you call any DLL function using DllImport?
Yes, you can import any function from a DLL as long as you know its signature and the DLL is accessible. However, you need to ensure that the function signature matches exactly with the one in the DLL.


FAQ: What are common issues to watch out for when using DllImport?
Common issues include mismatched data types between C# and the DLL, incorrect calling conventions, and character encoding or marshalling problems.


FAQ: What is an alternative to DllImport for newer C# projects?
For newer projects, LibraryImport is a modern alternative to DllImport.
It offers improved performance and better compatibility across different platforms and supports source generation.


------------



####### Lecture AssertsUnitTesting

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is the purpose of using Assert in code?
Assertions (Assert) are primarily used during development to verify that certain conditions hold true in code. They act as a sanity check that does not affect the production version of the software but helps developers catch bugs and incorrect assumptions during the development phase.


FAQ: When should you use Debug.Assert versus Trace.Assert?
Debug.Assert is used for assertions that you only want to execute in a Debug build of your application; they are ignored in release builds.
This is useful for checks that should not impact the performance or behavior of a production application.
Trace.Assert, on the other hand, works in both debug and release builds, making it suitable for assertions you want to enforce regardless of the build configuration.


FAQ: Can you give an example of a situation where an assertion might be used?
An assertion might be used to verify that an input parameter to a method is not null when null is NOT a valid argument for that method. For example, Debug.Assert(param != null); ensures that param is not null during development, helping catch bugs early.
This is different from doing a null check when using null as a parameter might be a valid use case.


FAQ: What are unit tests and how do they differ from assertions?
Unit tests are tests written to check the functionality of a specific section of code (a "unit"), such as a function or a class, to ensure it behaves as expected. Tests create certain scenarios and verify that each part of the system works as intended.


FAQ: What are the common C# testing frameworks?
There is MSTest which is Microsoft's official testing framework. Other popular ones include NUnit and xUnit.


------------



####### Lecture UnsafePointers

#### FREQUENTLY ASKED QUESTIONS
FAQ: What does unsafe mean in C#?
The unsafe keyword is used to denote a block of code that uses pointer manipulation.
This code block is called "unsafe" because it bypasses the C# type safety system, allowing direct memory access and manipulation, which can lead to security risks, data corruption, and crashes if not handled carefully.


FAQ: Why would you use unsafe code in C#?
If you know what you're doing, you can write some extremely performant code.


FAQ: What are pointers?
Pointers are variables that store the memory address of another type. By using that pointer you can read or write that memory address.


FAQ: How do you enable unsafe code in a C# project?
To enable unsafe code, you must configure your C# project settings. This is done by going to the project properties, finding the "Build" tab, and checking the "Allow unsafe code" box. Additionally, the compilation of unsafe code can be enabled with the /unsafe option in the C# compiler.


------------



####### Lecture AsyncAwaitTask

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is asynchronous programming and why is it used?
Asynchronous programming allows you to perform resource-intensive operations without blocking the main thread of your application, thus allowing you to keep the UI responsive.
In C#, async and await are used to simplify the process of writing asynchronous code, which is especially useful in applications involving contacting a web server or doing some I/O tasks, your program doesn't freeze while waiting for those to complete.



FAQ: What are the async and await keywords in C#?
The async keyword is used to declare a function as asynchronous and indicates that the function contains one or more await expressions.
The await keyword is used before a call to a function that returns a Task or Task<T>, signaling that the program should pause on that line of code until the task completes, while allowing other code to run.


FAQ: How does Task relate to async and await?
A Task represents an asynchronous operation. Task<T> extends Task to include a result of type T upon completion.
When you use await on a Task, you tell the compiler to continue executing the Task in the background, and the surrounding function itself returns a Task to its caller.



FAQ: Can you show an example of using async and await?
Here's a function that contacts a web server to get some data:

public async Task<string> FetchDataAsync() {
    using (HttpClient client = new HttpClient()) {
        string data = await client.GetStringAsync("https://api.example.com/data");
        return data;
    }
}

In this example, the await keyword is used to asynchronously wait for the HTTP request to complete without blocking the main thread. So the rest of the program can keep running while waiting for the web server to respond.



FAQ: What is the difference between Task.Wait() and await?
Task.Wait() blocks the calling thread until the task completes, which can cause the UI to freeze if used on the main thread. In contrast, await does not block the calling thread; it allows other work to continue running while waiting for the task to complete, making it more suitable for applications with a responsive UI.



FAQ: Can async functions return void?
Yes, async functions can return void, but this is generally not recommended. 
Functions that return void cannot be awaited, and exceptions thrown in such methods can only be caught using general exception handling techniques.



------------



####### Lecture Multithreading

#### FREQUENTLY ASKED QUESTIONS
FAQ: What is multithreading?
Multithreading allows you to execute multiple tasks concurrently within a single process.
It is a way to utilize multiple processor cores for performing several operations simultaneously, when use correctly it massively improves the performance of your programs.



FAQ: How do you create a thread in C#?
You can create a thread in C# using the Thread class from the System.Threading namespace. 
For example:
Thread myThread = new Thread(new ThreadStart(MyFunction));
myThread.Start();

This would create a worker thread, MyFunction would be the function that the new thread executes.



FAQ: What is the ThreadPool in C#?
The ThreadPool is a pool of threads maintained by the .NET runtime that can be used to execute tasks asynchronously.
It optimizes thread management by minimizing the overhead involved in thread creation and destruction. 
You can queue tasks to the ThreadPool like this:
ThreadPool.QueueUserWorkItem(state => {
    // Your task code here.
});



FAQ: What is a race condition and how can it be avoided?
A race condition occurs when two or more threads attempt to modify shared data at the same time and the outcome depends on the non-deterministic timing of their execution.
This can be avoided by using synchronization techniques such as locks, mutexes, or semaphores that ensure only one thread can access the critical section of code at a time. 
Here’s a basic example using lock:
private static object lockObject = new object();

public static void UpdateResource() {
    lock (lockObject) {
        // Code to safely update shared resource
        // Only one thread can be running this code at the same time
    }
}



FAQ: What is a deadlock and how can it be prevented?
A deadlock occurs when two or more threads each hold a lock and are waiting for the other to release another lock before proceeding, thus none of the threads can progress.
Deadlocks can be prevented by ensuring that all locks are always acquired in the same order, even if multiple locks are needed by different threads.



FAQ: What’s the difference between asynchronous programming and multithreading?
Asynchronous programming and multithreading both allow tasks to be performed in parallel with multiple code branches, but with a very big difference.
In asynchronous programming you still have just one main thread, when you await something that code is not running at the same time on a separate thread, it's just waiting for that code to finish executing and return a result, usually from an external source.
Whereas with multithreading you do have multiple cores running code at the exact same time.
Async is great for when some work is being done somewhere else, like a web server, and multithreading is great for when you want to use all CPU cores to the max.



------------



