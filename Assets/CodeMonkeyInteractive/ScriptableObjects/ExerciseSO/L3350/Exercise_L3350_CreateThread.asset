%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 37e24839d78e00c4aa3ef4e0e593ae05, type: 3}
  m_Name: Exercise_L3350_CreateThread
  m_EditorClassIdentifier: 
  exerciseName: CreateThread
  exerciseTitle: Create Thread
  exerciseText: 'Create 3 Threads that run the ExerciseValidateWorkerThread(); function

    Then
    call .Start(); and .Join(); on all of them it and finally call ExerciseValidateMainThread();'
  hintText: Do new Thread(); and pass in ExerciseValidate, then grab that thread
    reference and call Start(); to begin doing work, then Join(); to make sure the
    work completes before calling ExerciseCompleted();
  solutionText: "Thread[] threadArray = new Thread[3];\r\n\r\nfor (int i = 0; i <
    threadArray.Length; i++) {\r\n    threadArray[i] = new Thread(ExerciseValidateWorkerThread);\r\n}\r\nfor
    (int i = 0; i < threadArray.Length; i++) {\r\n    threadArray[i].Start();\r\n}\r\nfor
    (int i = 0; i < threadArray.Length; i++) {\r\n    threadArray[i].Join();\r\n}\r\n\r\nExerciseValidateMainThread();"
  completedText: Here you learned how to create a simple thread. As you can see the
    basics are quite easy but definitely be careful when writing complex multithreaded
    code.
  videoWalkthroughLink: https://www.youtube.com/watch?v=-Uh2SAgIY3M
